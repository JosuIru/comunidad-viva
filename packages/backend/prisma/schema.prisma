// packages/backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============= USERS & AUTH =============
model User {
  id              String    @id @default(uuid())
  email           String    @unique
  phone           String?   @unique
  password        String
  name            String
  bio             String?
  avatar          String?
  role            UserRole  @default(CITIZEN)
  emailVerified   Boolean   @default(false)
  phoneVerified   Boolean   @default(false)

  // Two-Factor Authentication
  twoFactorEnabled Boolean   @default(false)
  twoFactorSecret  String?   // TOTP secret (encrypted)
  backupCodes      String[]  @default([]) // Backup recovery codes (hashed)

  // Web3 Wallet Authentication
  walletAddress    String?   @unique       // Ethereum or Solana wallet address
  walletType       String?                 // METAMASK, PHANTOM, WALLETCONNECT
  isEmailVerified  Boolean   @default(false) // Separate from emailVerified for wallet users

  // Community
  communityId     String?

  // Location
  lat             Float?
  lng             Float?
  address         String?
  neighborhood    String?
  searchRadius    Int       @default(5) // km
  
  // Gamification
  credits         Int       @default(0)
  level           Int       @default(1)
  experience      Int       @default(0)
  activeStreak    Int       @default(0)
  lastActiveAt    DateTime  @default(now())
  
  // Stats
  totalSaved      Float     @default(0)
  hoursShared     Float     @default(0)
  hoursReceived   Float     @default(0)
  co2Avoided      Float     @default(0)
  peopleHelped    Int       @default(0)
  peopleHelpedBy  Int       @default(0)
  connectionsCount Int      @default(0)
  
  // Preferences
  language        String    @default("es")
  notificationPreferences Json @default("{}")
  privacy         Json      @default("{}")
  interests       String[]
  weeklyMood      WeeklyMood?
  dailySeeds      Boolean   @default(true)

  // Sistema Híbrido: Capa de Realidad Económica
  economicLayer   EconomicLayer @default(TRADITIONAL)
  layerConfig     Json      @default("{}")  // Configuración específica de la capa
  layerMigrations LayerMigration[]
  softCredits     Int?                      // Créditos opcionales para capa transicional
  lastLayerChange DateTime?

  // Gailu Labs Federation
  gailuDID        String?   @unique         // Decentralized Identifier: did:gailu:nodeId:user:uuid
  gailuNodeId     String?                   // ID del nodo en la federación
  semillaBalance  Float     @default(0)     // Balance de tokens SEMILLA
  proofOfHelpScore Float    @default(0)     // Puntuación de Prueba de Ayuda
  consciousnessLevel Int    @default(1)     // Nivel de conciencia (1-7)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  
  // Relations
  community       Community? @relation("CommunityMembers", fields: [communityId], references: [id])
  skills          Skill[]
  badges          UserBadge[]
  offers          Offer[]
  orders          Order[]
  posts           Post[]
  comments        Comment[]
  reactions       Reaction[]
  notifications   Notification[]
  creditLedger    CreditTransaction[]
  timeBankGiven   TimeBankTransaction[] @relation("Provider")
  timeBankReceived TimeBankTransaction[] @relation("Requester")
  events          EventAttendee[]
  eventsOrganized Event[] @relation("Organizer")
  groupBuyParticipations GroupBuyParticipant[]
  groupBuyOrders  GroupBuyOrder[]
  reviewsGiven    Review[] @relation("ReviewsGiven")
  connections     Connection[] @relation("User")
  connectedTo     Connection[] @relation("ConnectedUser")
  merchant        Merchant?
  reports         Report[] @relation("Reporter")
  reportedContent Report[] @relation("ReportedUser")
  messages        Message[] @relation("Sender")
  messagesReceived Message[] @relation("Receiver")
  helpChains      HelpChain[] @relation("Initiator")
  chainLinks      ChainLink[] @relation("FromUser")
  chainLinksTo    ChainLink[] @relation("ToUser")
  dailySeedCompletions UserDailySeedCompletion[]
  offerInterests  OfferInterest[]

  // Consensus & Governance
  trustBlocks     TrustBlock[] @relation("TrustBlockActor")
  blockValidations BlockValidation[] @relation("BlockValidator")
  proposalsCreated Proposal[] @relation("ProposalAuthor")
  proposalVotes   ProposalVote[] @relation("ProposalVoter")
  proposalComments ProposalComment[] @relation("ProposalCommentAuthor")
  moderationReports ModerationDAO[] @relation("ModerationReporter")
  moderationVotes ModerationVote[] @relation("ModerationVoter")
  voteCredits     Int       @default(10) // Credits for quadratic voting

  // Flow Economics
  generosityScore Float     @default(0.0) // Measures giving behavior
  flowPower       Float     @default(1.0) // Voting power based on generosity
  lastDemurrageAt DateTime  @default(now()) // Last time demurrage was applied
  flowTransactionsFrom FlowTransaction[] @relation("FlowFrom")
  flowTransactionsTo   FlowTransaction[] @relation("FlowTo")
  poolContributions    PoolContribution[]
  poolRequests         PoolRequest[] @relation("PoolRequestUser")
  poolRequestVotes     PoolRequestVote[] @relation("PoolRequestVoter")

  // Viral Engagement Features
  flashDealRedemptions FlashDealRedemption[]
  stories              Story[]
  storyReactions       StoryReaction[]
  storyViews           StoryView[]
  swipes               Swipe[]
  matchesAsUser1       Match[] @relation("MatchUser1")
  matchesAsUser2       Match[] @relation("MatchUser2")
  challengeParticipations ChallengeParticipant[]
  referralCodes        ReferralCode[] @relation("ReferralCodeOwner")
  referredBy           Referral[] @relation("ReferralReferred")
  liveEventParticipations LiveEventParticipant[]
  microActions         MicroAction[]
  featureUnlocks       UserFeatureUnlock[]
  onboardingProgress   OnboardingProgress?
  dailyActions         Int       @default(0)

  // Housing & Spaces
  spacesOffered        SpaceBank[] @relation("SpaceOwner")
  spaceBookings        SpaceBooking[] @relation("SpaceBooker")
  housingOffered       TemporaryHousing[] @relation("HousingHost")
  housingBookings      HousingBooking[] @relation("HousingGuest")
  housingCoopMemberships HousingCoopMember[] @relation("CoopMember")
  housingCoopProposals HousingCoopProposal[] @relation("ProposalCreator")
  housingCoopVotes     HousingCoopVote[] @relation("CoopVoter")
  communityGuarantees  CommunityGuarantee[] @relation("GuaranteedPerson")
  guaranteesGiven      GuaranteeSupporter[] @relation("Guarantor")

  // Needs & Community Projects
  needsCreated         Need[] @relation("NeedCreator")
  projectsCreated      CommunityProject[] @relation("ProjectCreator")
  contributions        Contribution[] @relation("Contributor")
  projectUpdates       ProjectUpdate[] @relation("UpdateAuthor")
  impactReports        ImpactReport[] @relation("ReportAuthor")

  // Gailu Labs Federation Relations
  semillaTransactionsSent     SemillaTransaction[] @relation("SemillaSender")
  semillaTransactionsReceived SemillaTransaction[] @relation("SemillaReceiver")
  bridgeTransactions          BridgeTransaction[] @relation("BridgeUser")
  circuloParticipations       CirculoParticipacion[]
  federatedActivitiesPublished FederatedActivity[] @relation("ActivityPublisher")

  // Authentication
  refreshTokens               RefreshToken[]

  @@index([email])
  @@index([phone])
  @@index([neighborhood])
  @@index([lat, lng])
  @@index([lastActiveAt])
  @@index([generosityScore])
  @@index([communityId])
}

// ============= AUTHENTICATION =============
model RefreshToken {
  id           String    @id @default(uuid())
  token        String    @unique  // Hashed refresh token
  userId       String
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  revokedAt    DateTime?

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

// ============= COMMUNITIES =============
model Community {
  id                String              @id @default(uuid())
  slug              String              @unique  // URL-friendly identifier: "barrio-gracia"
  name              String                       // Display name: "Barrio de Gracia"
  description       String?
  logo              String?
  bannerImage       String?

  // Location
  location          String?                      // "Barcelona, España"
  lat               Float?
  lng               Float?
  radiusKm          Float?                       // Geographic radius of operation

  // Configuration
  type              CommunityType
  visibility        CommunityVisibility
  requiresApproval  Boolean             @default(false) // Manual approval for new members
  allowExternalOffers Boolean           @default(false) // Can see offers from connected communities

  // Branding & Customization
  primaryColor      String?
  language          String              @default("es")
  currency          String              @default("EUR")

  // Stats
  membersCount      Int                 @default(0)
  activeOffersCount Int                 @default(0)

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  users             User[]              @relation("CommunityMembers")
  governance        CommunityGovernance?
  offers            Offer[]
  events            Event[]
  connectionsOut    CommunityConnection[] @relation("SourceCommunity")
  connectionsIn     CommunityConnection[] @relation("TargetCommunity")
  membershipRequests MembershipRequest[] @relation("CommunityMembershipRequests")
  spaces            SpaceBank[]
  housing           TemporaryHousing[]
  housingCoops      HousingCoop[]
  communityGuarantees CommunityGuarantee[]
  needs             Need[] @relation("CommunityNeeds")
  projects          CommunityProject[] @relation("CommunityProjects")
  projectContributions Contribution[] @relation("CommunityContributions")

  @@index([slug])
  @@index([type])
  @@index([visibility])
  @@index([lat, lng])
}

enum CommunityType {
  NEIGHBORHOOD  // Barrio
  VILLAGE       // Pueblo
  TOWN          // Ciudad pequeña
  COUNTY        // Comarca/Concejo
  REGION        // Región
  CUSTOM        // Personalizado
}

enum CommunityVisibility {
  PRIVATE       // Solo miembros, invisible externamente
  PUBLIC        // Visible, requiere aprobación para unirse
  OPEN          // Visible y cualquiera puede unirse
  FEDERATED     // Conectada con otras comunidades
}

// Gobernanza descentralizada por consenso comunitario
model CommunityGovernance {
  id                    String    @id @default(uuid())
  communityId           String    @unique

  // Thresholds de reputación para participar (basado en generosityScore)
  minProposalReputation Float     @default(10.0)  // Mínimo para proponer cambios
  minVoteReputation     Float     @default(1.0)   // Mínimo para votar
  minModerateReputation Float     @default(5.0)   // Mínimo para moderar contenido

  // Parámetros de consenso
  quorumPercentage      Int       @default(20)    // % de miembros activos necesarios
  approvalPercentage    Int       @default(66)    // % de votos a favor para aprobar
  proposalDuration      Int       @default(7)     // días de discusión
  votingDuration        Int       @default(3)     // días de votación

  // Votación cuadrática
  useQuadraticVoting    Boolean   @default(true)  // Evita plutocracias
  maxVoteCredits        Int       @default(100)   // Máximo créditos por propuesta

  // Sistema anti-trolls
  autoModerateThreshold Int       @default(5)     // Reportes para revisión automática
  banThreshold          Int       @default(10)    // Reportes para ban automático temporal

  // Fundadores iniciales (solo para bootstrap, sin privilegios permanentes)
  founders              String[]                  // User IDs fundadores
  foundedAt             DateTime  @default(now())
  bootstrapEndDate      DateTime?                 // Cuando termina período de bootstrap

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  community             Community @relation(fields: [communityId], references: [id])

  @@index([communityId])
}

model CommunityConnection {
  id                String           @id @default(uuid())
  sourceCommunityId String
  targetCommunityId String
  status            ConnectionStatus @default(PENDING)
  shareOffers       Boolean          @default(true)
  shareEvents       Boolean          @default(true)

  initiatedBy       String?          // User ID who initiated
  approvedBy        String?          // User ID who approved

  createdAt         DateTime         @default(now())
  approvedAt        DateTime?

  sourceCommunity   Community        @relation("SourceCommunity", fields: [sourceCommunityId], references: [id])
  targetCommunity   Community        @relation("TargetCommunity", fields: [targetCommunityId], references: [id])

  @@unique([sourceCommunityId, targetCommunityId])
  @@index([sourceCommunityId])
  @@index([targetCommunityId])
  @@index([status])
}

// Membership requests for communities that require approval
model MembershipRequest {
  id          String              @id @default(uuid())
  communityId String
  userId      String
  status      MembershipRequestStatus @default(PENDING)
  message     String?             // Optional message from requester

  reviewedBy  String?             // User ID who reviewed the request
  reviewNote  String?             // Optional note from reviewer

  createdAt   DateTime            @default(now())
  reviewedAt  DateTime?

  community   Community           @relation("CommunityMembershipRequests", fields: [communityId], references: [id])

  @@unique([communityId, userId])
  @@index([communityId])
  @@index([userId])
  @@index([status])
}

enum MembershipRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ConnectionStatus {
  PENDING     // Solicitud pendiente
  APPROVED    // Conexión aprobada
  REJECTED    // Solicitud rechazada
  SUSPENDED   // Conexión suspendida temporalmente
}

enum UserRole {
  CITIZEN
  MERCHANT
  ADMIN
  MODERATOR
  PUBLIC_ENTITY
}

enum WeeklyMood {
  AVAILABLE    // Disponible para ayudar
  LEARNING     // Buscando aprender
  ORGANIZING   // Organizando actividad
  RESTING      // Descansando
}

enum EconomicLayer {
  TRADITIONAL   // Capa 1: Sistema tradicional con créditos, medición completa
  TRANSITIONAL  // Capa 2: Sistema transicional, menos medición, más flujo
  GIFT_PURE     // Capa 3: Regalo puro, sin medición alguna
  CHAMELEON     // Modo especial: Se adapta a quien interactúa
}

// ============= SKILLS & REPUTATION =============
model Skill {
  id          String   @id @default(uuid())
  userId      String
  category    String
  name        String
  description String?
  verified    Boolean  @default(false)
  endorsements Int     @default(0)
  
  user        User     @relation(fields: [userId], references: [id])
  timeBankOffers TimeBankOffer[]
  
  @@unique([userId, name])
  @@index([category])
}

model UserBadge {
  id          String   @id @default(uuid())
  userId      String
  badgeType   BadgeType
  earnedAt    DateTime @default(now())
  metadata    Json?    // Información adicional: progreso, tier, etc.
  progress    Int      @default(0) // Progreso actual hacia siguiente tier
  isNew       Boolean  @default(true) // Marca si el badge es nuevo (para animación)

  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, badgeType])
  @@index([userId])
}

// Sistema Completo de Achievements/Badges
enum BadgeType {
  // === AYUDA MUTUA === (Progresión: 10, 50, 100, 500, 1000)
  HELPER_10           // Ayudó a 10 personas
  HELPER_50           // Ayudó a 50 personas
  HELPER_100          // Ayudó a 100 personas
  HELPER_500          // Ayudó a 500 personas - "Ángel de la Comunidad"
  HELPER_1000         // Ayudó a 1000 personas - "Santo Patrono"

  // === TIEMPO COMPARTIDO === (horas: 10, 50, 100, 500, 1000)
  TIME_GIVER_10       // Compartió 10 horas
  TIME_GIVER_50       // Compartió 50 horas
  TIME_GIVER_100      // Compartió 100 horas
  TIME_GIVER_500      // Compartió 500 horas - "Maestro del Tiempo"
  TIME_GIVER_1000     // Compartió 1000 horas - "Crononauta"

  // === ORGANIZACIÓN DE EVENTOS ===
  ORGANIZER_FIRST     // Organizó su primer evento
  ORGANIZER_5         // Organizó 5 eventos
  ORGANIZER_20        // Organizó 20 eventos
  ORGANIZER_50        // Organizó 50 eventos - "Maestro de Ceremonias"

  // === ECO-SOSTENIBILIDAD ===
  ECO_STARTER         // Ahorró 10kg CO2
  ECO_WARRIOR         // Ahorró 100kg CO2
  ECO_CHAMPION        // Ahorró 500kg CO2
  ECO_LEGEND          // Ahorró 1 tonelada CO2 - "Guardián del Planeta"

  // === CONEXIONES SOCIALES ===
  CONNECTOR_10        // Conectó a 10 personas
  CONNECTOR_50        // Conectó a 50 personas
  CONNECTOR_100       // Conectó a 100 personas - "Tejedor Social"

  // === APRENDIZAJE ===
  LEARNER_FIRST       // Aprendió su primera habilidad
  LEARNER_5           // Aprendió 5 habilidades
  LEARNER_20          // Aprendió 20 habilidades - "Polímata"

  // === ENSEÑANZA ===
  TEACHER_FIRST       // Enseñó su primera habilidad
  TEACHER_10          // Enseñó a 10 personas
  TEACHER_50          // Enseñó a 50 personas - "Mentor"
  TEACHER_100         // Enseñó a 100 personas - "Gurú"

  // === AHORRO ECONÓMICO ===
  SAVER_100           // Ahorró 100€
  SAVER_500           // Ahorró 500€
  SAVER_1000          // Ahorró 1000€
  SAVER_5000          // Ahorró 5000€ - "Maestro del Ahorro"

  // === PARTICIPACIÓN COMUNITARIA ===
  PIONEER             // Usuario de los primeros 100
  VETERAN             // Usuario activo 1 año
  LEGEND              // Usuario activo 3 años

  // === GOBERNANZA ===
  VOTER_FIRST         // Participó en su primera votación
  VOTER_10            // Participó en 10 votaciones
  VOTER_50            // Participó en 50 votaciones - "Demócrata Activo"
  PROPOSER_FIRST      // Creó su primera propuesta
  PROPOSER_APPROVED   // Propuesta aprobada por la comunidad

  // === MODERACIÓN ===
  MODERATOR_FAIR      // 100 moderaciones justas
  MODERATOR_TRUSTED   // 500 moderaciones justas - "Guardián de la Paz"

  // === SOCIAL MEDIA ===
  INFLUENCER_100      // 100 reacciones en posts
  INFLUENCER_1000     // 1000 reacciones en posts - "Voz de la Comunidad"
  STORYTELLER         // 50 posts creados

  // === ECONOMÍA DE REGALO ===
  GIFT_GIVER_FIRST    // Primera contribución en capa GIFT
  GIFT_GIVER_100      // 100 contribuciones en capa GIFT
  GIFT_RECEIVER       // Recibió regalo en capa GIFT
  ABUNDANCE_SHARER    // Compartió abundancia 20 veces

  // === VIVIENDA COMUNITARIA ===
  HOST_FIRST          // Ofreció alojamiento por primera vez
  HOST_10             // Alojó a 10 personas
  HOST_50             // Alojó a 50 personas - "Hogar de Todos"
  TRAVELER            // Usó alojamiento comunitario 10 veces

  // === COMPRAS GRUPALES ===
  GROUPBUY_FIRST      // Participó en primera compra grupal
  GROUPBUY_ORGANIZER  // Organizó compra grupal
  GROUPBUY_VETERAN    // 20 compras grupales

  // === CHALLENGES Y GAMIFICACIÓN ===
  CHALLENGER          // Completó 10 challenges
  CHALLENGER_MASTER   // Completó 100 challenges
  STREAK_7            // Racha de 7 días
  STREAK_30           // Racha de 30 días
  STREAK_100          // Racha de 100 días - "Imparable"
  EARLY_BIRD          // Activo antes de las 7am 10 veces
  NIGHT_OWL           // Activo después de las 11pm 10 veces

  // === REFERIDOS ===
  REFERRER_FIRST      // Refirió a su primer amigo
  REFERRER_10         // Refirió a 10 amigos
  REFERRER_50         // Refirió a 50 amigos - "Embajador"

  // === ESPECIALES / SECRETOS ===
  UNICORN             // Badge secreto - descubre cómo desbloquearlo
  PHILOSOPHER         // Completó perfil filosófico
  RAINBOW             // Usó todas las capas económicas
  SHAPESHIFTER        // Migró entre capas 10 veces
  CONSENSUS_PIONEER   // Participó en primer consenso
  BLOCKCHAIN_BRIDGE   // Usó bridge Polygon/Solana

  // === NIVELES MAESTROS ===
  LEVEL_10            // Alcanzó nivel 10
  LEVEL_25            // Alcanzó nivel 25
  LEVEL_50            // Alcanzó nivel 50 - "Maestro"
  LEVEL_100           // Alcanzó nivel 100 - "Gran Maestro"
}

// ============= OFFERS & MARKETPLACE =============
model Offer {
  id          String    @id @default(uuid())
  userId      String
  communityId String?
  type        OfferType
  category    String
  title       String
  description String
  images      String[]

  priceEur    Float?
  priceCredits Int?
  stock       Int?

  lat         Float?
  lng         Float?
  address     String?
  
  tags        String[]
  status      OfferStatus @default(ACTIVE)
  featured    Boolean   @default(false)
  
  views       Int       @default(0)
  interested  Int       @default(0)
  supporters  Int       @default(0)
  shares      Int       @default(0)
  
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id])
  community   Community? @relation(fields: [communityId], references: [id])
  orderItems  OrderItem[]
  posts       Post[]    @relation("OfferPosts")
  savedBy     SavedOffer[]
  interestedUsers OfferInterest[]
  groupBuy    GroupBuy?
  timeBank    TimeBankOffer?
  event       Event?
  swipes      Swipe[]
  matches     Match[]

  @@index([userId])
  @@index([communityId])
  @@index([type])
  @@index([category])
  @@index([status])
  @@index([lat, lng])
  @@index([createdAt])
}

enum OfferType {
  PRODUCT
  SERVICE
  TIME_BANK
  GROUP_BUY
  EVENT
}

enum OfferStatus {
  ACTIVE
  PAUSED
  COMPLETED
  EXPIRED
  CANCELLED
}

model SavedOffer {
  id        String   @id @default(uuid())
  userId    String
  offerId   String
  savedAt   DateTime @default(now())

  offer     Offer    @relation(fields: [offerId], references: [id])

  @@unique([userId, offerId])
  @@index([offerId])
}

model OfferInterest {
  id           String   @id @default(uuid())
  userId       String
  offerId      String
  interestedAt DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id])
  offer        Offer    @relation(fields: [offerId], references: [id])

  @@unique([userId, offerId])
  @@index([userId])
  @@index([offerId])
}

// ============= GROUP BUYS =============
model GroupBuy {
  id              String   @id @default(uuid())
  offerId         String   @unique
  minParticipants Int
  maxParticipants Int
  currentParticipants Int  @default(0)
  deadline        DateTime
  pickupLat       Float
  pickupLng       Float
  pickupAddress   String
  status          GroupBuyStatus @default(ACTIVE)
  createdAt       DateTime @default(now())

  offer           Offer    @relation(fields: [offerId], references: [id])
  priceBreaks     PriceBreak[]
  participants    GroupBuyParticipant[]
  orders          GroupBuyOrder[]

  @@index([deadline])
  @@index([status])
}

enum GroupBuyStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

model PriceBreak {
  id           String   @id @default(uuid())
  groupBuyId   String
  minQuantity  Int
  pricePerUnit Float
  savings      Float    // percentage
  
  groupBuy     GroupBuy @relation(fields: [groupBuyId], references: [id])
  
  @@index([groupBuyId])
}

model GroupBuyParticipant {
  id          String   @id @default(uuid())
  groupBuyId  String
  userId      String
  quantity    Int
  committed   Boolean  @default(false)
  joinedAt    DateTime @default(now())

  groupBuy    GroupBuy @relation(fields: [groupBuyId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([groupBuyId, userId])
  @@index([userId])
}

model GroupBuyOrder {
  id              String             @id @default(uuid())
  groupBuyId      String
  userId          String
  quantity        Int
  pricePerUnit    Float
  totalAmount     Float
  status          GroupBuyOrderStatus @default(PENDING)

  // Delivery information
  pickupScheduled DateTime?
  pickedUpAt      DateTime?

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  groupBuy        GroupBuy    @relation(fields: [groupBuyId], references: [id])
  user            User        @relation(fields: [userId], references: [id])

  @@unique([groupBuyId, userId])
  @@index([userId])
  @@index([status])
}

enum GroupBuyOrderStatus {
  PENDING
  CONFIRMED
  READY_FOR_PICKUP
  PICKED_UP
  CANCELLED
}

// ============= TIME BANK =============
model TimeBankOffer {
  id              String   @id @default(uuid())
  offerId         String   @unique
  skillId         String?
  estimatedHours  Float
  canTeach        Boolean  @default(false)
  maxStudents     Int?
  experienceLevel ExperienceLevel
  toolsNeeded     String[]
  
  offer           Offer    @relation(fields: [offerId], references: [id])
  skill           Skill?   @relation(fields: [skillId], references: [id])
  transactions    TimeBankTransaction[]
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

model TimeBankTransaction {
  id            String   @id @default(uuid())
  requesterId   String
  providerId    String
  offerId       String?
  description   String
  hours         Float
  credits       Int
  
  scheduledFor  DateTime
  completedAt   DateTime?
  status        TransactionStatus
  
  requesterRating Int?
  requesterComment String?
  providerRating  Int?
  providerComment String?
  
  impactStory   String?  // "Lo mejor de este intercambio"
  chainedFavor  Boolean  @default(false)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  requester     User     @relation("Requester", fields: [requesterId], references: [id])
  provider      User     @relation("Provider", fields: [providerId], references: [id])
  timeBankOffer TimeBankOffer? @relation(fields: [offerId], references: [id])
  
  @@index([requesterId])
  @@index([providerId])
  @@index([status])
  @@index([scheduledFor])
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  DISPUTED
}

// ============= ORDERS & PAYMENTS =============
model Order {
  id            String   @id @default(uuid())
  buyerId       String
  totalEur      Float
  totalCredits  Int
  paymentMethod PaymentMethod
  
  pickupLat     Float?
  pickupLng     Float?
  pickupAddress String?
  pickupTime    DateTime?
  
  status        OrderStatus
  notes         String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  completedAt   DateTime?
  
  buyer         User     @relation(fields: [buyerId], references: [id])
  items         OrderItem[]
  payment       Payment?
  
  @@index([buyerId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id           String   @id @default(uuid())
  orderId      String
  offerId      String
  quantity     Int
  priceEur     Float
  priceCredits Int
  notes        String?
  
  order        Order    @relation(fields: [orderId], references: [id])
  offer        Offer    @relation(fields: [offerId], references: [id])
  
  @@index([orderId])
  @@index([offerId])
}

model Payment {
  id            String   @id @default(uuid())
  orderId       String   @unique
  amount        Float
  currency      String   @default("EUR")
  method        PaymentMethod
  status        PaymentStatus
  stripeId      String?
  metadata      Json?
  
  createdAt     DateTime @default(now())
  
  order         Order    @relation(fields: [orderId], references: [id])
}

enum PaymentMethod {
  CASH
  CARD
  CREDITS
  MIXED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum OrderStatus {
  PENDING
  PAID
  PREPARING
  READY
  COMPLETED
  CANCELLED
  REFUNDED
}

// ============= CREDITS SYSTEM =============
model CreditTransaction {
  id          String   @id @default(uuid())
  userId      String
  amount      Int      // positive = earned, negative = spent
  balance     Int      // balance after transaction
  reason      CreditReason
  description String?
  relatedId   String?  // ID of related entity
  metadata    Json?
  
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([reason])
  @@index([createdAt])
}

enum CreditReason {
  TIME_BANK_HOUR
  LOCAL_PURCHASE
  EVENT_ATTENDANCE
  REFERRAL
  ECO_ACTION
  COMMUNITY_HELP
  DAILY_SEED
  SUPPORT_POST    // Apoyar publicación
  ADMIN_GRANT
  ADMIN_DEDUCT
  EXPIRATION
  OFFER_CREATED
  REVIEW
  PURCHASE
  DISCOUNT
  SERVICE
  EVENT_ACCESS
  ADJUSTMENT
  SYSTEM_REWARD   // Recompensas automáticas del sistema
}

// ============= EVENTS =============
model Event {
  id          String   @id @default(uuid())
  offerId     String?  @unique
  organizerId String
  communityId String?
  title       String
  description String
  image       String?

  lat         Float
  lng         Float
  address     String

  startsAt    DateTime
  endsAt      DateTime
  capacity    Int?

  creditsReward Int    @default(0)
  tags        String[]
  type        EventType
  requirements String[]
  status      EventStatus @default(ACTIVE)

  qrCode      String?  @unique

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organizer   User     @relation("Organizer", fields: [organizerId], references: [id])
  community   Community? @relation(fields: [communityId], references: [id])
  offer       Offer?   @relation(fields: [offerId], references: [id])
  attendees   EventAttendee[]

  @@index([organizerId])
  @@index([communityId])
  @@index([startsAt])
  @@index([type])
}

model EventAttendee {
  id           String   @id @default(uuid())
  eventId      String
  userId       String
  role         AttendeeRole @default(PARTICIPANT)
  registeredAt DateTime @default(now())
  checkedInAt  DateTime?
  feedback     String?
  creditsEarned Int     @default(0)
  
  event        Event    @relation(fields: [eventId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
  
  @@unique([eventId, userId])
}

enum EventType {
  WORKSHOP
  CLEANUP
  MARKET
  SOCIAL
  REPAIR_CAFE
  COMMUNITY_MEAL
  SKILLSHARE
}

enum EventStatus {
  ACTIVE
  CANCELLED
  COMPLETED
}

enum AttendeeRole {
  PARTICIPANT
  VOLUNTEER
  ORGANIZER
  SPEAKER
}

// ============= SOCIAL FEATURES =============
model Post {
  id          String   @id @default(uuid())
  authorId    String
  content     String
  images      String[]
  
  lat         Float?
  lng         Float?
  
  type        PostType
  visibility  Visibility
  tags        String[]
  mentions    String[]
  
  relatedOfferId String?
  
  thanksCount Int      @default(0)
  supportsCount Int    @default(0)
  commentsCount Int    @default(0)
  sharesCount Int      @default(0)
  helpedCount Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  editedAt    DateTime?
  
  author      User     @relation(fields: [authorId], references: [id])
  relatedOffer Offer?  @relation("OfferPosts", fields: [relatedOfferId], references: [id])
  comments    Comment[]
  reactions   Reaction[]
  
  @@index([authorId])
  @@index([type])
  @@index([visibility])
  @@index([createdAt])
}

model Comment {
  id        String   @id @default(uuid())
  postId    String
  authorId  String
  content   String
  
  createdAt DateTime @default(now())
  editedAt  DateTime?
  
  post      Post     @relation(fields: [postId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])
  
  @@index([postId])
  @@index([authorId])
}

model Reaction {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  type      ReactionType
  
  createdAt DateTime @default(now())
  
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  
  @@unique([postId, userId, type])
}

enum PostType {
  STORY
  NEED
  OFFER
  THANKS
  ACHIEVEMENT
  MILESTONE
  TIP
}

enum Visibility {
  PUBLIC
  NEIGHBORS
  FRIENDS
  PRIVATE
}

enum ReactionType {
  THANKS      // Gracias
  SUPPORT     // Apoyo (con crédito)
  HELPED      // Me ayudó
  CELEBRATE   // Celebrar
}

// ============= CONNECTIONS & MESSAGES =============
model Connection {
  id           String   @id @default(uuid())
  userId       String
  connectedId  String
  type         ConnectionType
  strength     Int      @default(1) // interacciones count
  
  createdAt    DateTime @default(now())
  lastInteraction DateTime @default(now())
  
  user         User     @relation("User", fields: [userId], references: [id])
  connectedUser User    @relation("ConnectedUser", fields: [connectedId], references: [id])
  
  @@unique([userId, connectedId])
  @@index([strength])
}

enum ConnectionType {
  NEIGHBOR
  HELPER
  HELPED_BY
  FRIEND
  BLOCKED
}

model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  read       Boolean  @default(false)
  metadata   Json?
  
  createdAt  DateTime @default(now())
  readAt     DateTime?
  
  sender     User     @relation("Sender", fields: [senderId], references: [id])
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id])
  
  @@index([senderId, receiverId])
  @@index([createdAt])
}

// ============= MERCHANTS =============
model Merchant {
  id              String   @id @default(uuid())
  userId          String   @unique
  businessName    String
  nif             String   @unique
  category        String
  description     String
  logo            String?
  images          String[]
  
  lat             Float
  lng             Float
  address         String
  
  phone           String?
  email           String?
  website         String?
  
  schedule        Json     // WeeklySchedule
  acceptsCredits  Boolean  @default(false)
  creditDiscount  Int      @default(20) // % max
  
  supporters      Int      @default(0)
  sustainabilityScore Float?
  certifications  String[]
  
  verified        Boolean  @default(false)
  featured        Boolean  @default(false)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id])
  impacts         MerchantImpact[]
  flashDeals      FlashDeal[]

  @@index([category])
  @@index([lat, lng])
}

model MerchantImpact {
  id              String   @id @default(uuid())
  merchantId      String
  month           String   // "2024-01"
  localPurchases  Float
  creditsAccepted Int
  jobsCreated     Int      @default(0)
  localSuppliers  Int      @default(0)
  wasteReduced    Float    @default(0)
  communityEvents Int      @default(0)
  
  merchant        Merchant @relation(fields: [merchantId], references: [id])
  
  @@unique([merchantId, month])
  @@index([month])
}

// ============= HELP CHAINS =============
model HelpChain {
  id          String   @id @default(uuid())
  initiatorId String
  status      ChainStatus
  story       String?
  
  createdAt   DateTime @default(now())
  completedAt DateTime?
  
  initiator   User     @relation("Initiator", fields: [initiatorId], references: [id])
  links       ChainLink[]
  
  @@index([status])
}

model ChainLink {
  id          String   @id @default(uuid())
  chainId     String
  fromUserId  String
  toUserId    String
  action      String
  message     String?
  
  timestamp   DateTime @default(now())
  
  chain       HelpChain @relation(fields: [chainId], references: [id])
  fromUser    User     @relation("FromUser", fields: [fromUserId], references: [id])
  toUser      User     @relation("ToUser", fields: [toUserId], references: [id])
  
  @@index([chainId])
}

enum ChainStatus {
  ACTIVE
  COMPLETED
  BROKEN
}

// ============= GAMIFICATION =============
model DailySeed {
  id              String   @id @default(uuid())
  date            DateTime @unique
  type            SeedType
  challenge       String
  description     String
  creditsReward   Int
  participantsCount Int    @default(0)

  createdAt       DateTime @default(now())
  completions     UserDailySeedCompletion[]
}

model UserDailySeedCompletion {
  id              String   @id @default(uuid())
  userId          String
  dailySeedId     String
  completedAt     DateTime @default(now())
  creditsAwarded  Int

  user            User     @relation(fields: [userId], references: [id])
  dailySeed       DailySeed @relation(fields: [dailySeedId], references: [id])

  @@unique([userId, dailySeedId])
  @@index([userId])
  @@index([dailySeedId])
}

enum SeedType {
  GREETING    // Saluda a un vecino
  SHARING     // Comparte algo
  HELPING     // Ayuda a alguien
  LEARNING    // Aprende algo nuevo
  CONNECTING  // Conecta a dos personas
  ECO_ACTION  // Acción ecológica
}

// ============= NOTIFICATIONS =============
model Notification {
  id         String   @id @default(uuid())
  userId     String
  type       NotificationType
  title      String
  body       String
  data       Json?
  read       Boolean  @default(false)
  actionUrl  String?
  link       String?  // URL de acción (alias de actionUrl)

  createdAt  DateTime @default(now())
  readAt     DateTime?

  user       User     @relation(fields: [userId], references: [id])

  @@index([userId, read])
  @@index([type])
  @@index([createdAt])
}

enum NotificationType {
  HELP_REQUEST
  HELP_OFFERED
  TRANSACTION_COMPLETED
  GROUP_BUY_CLOSING
  EVENT_REMINDER
  CREDITS_EARNED
  CREDITS_EXPIRING
  COMMUNITY_MILESTONE
  NEIGHBOR_NEEDS
  WEEKLY_IMPACT
  BURNOUT_CARE
  CONNECTION_SUGGESTION
  NEW_MESSAGE
  POST_MENTION
  POST_SUPPORT
  FEATURE_UNLOCK      // Nueva característica desbloqueada
  BADGE_EARNED        // Insignia ganada
  LEVEL_UP            // Subida de nivel
  NEARBY_DEAL         // Oferta cercana
  HAPPY_HOUR          // Happy hour activo
  WEEKLY_CHALLENGE    // Reto semanal
  ANNOUNCEMENT        // Anuncio general
}

// ============= REPORTING & MODERATION =============
model Report {
  id           String   @id @default(uuid())
  reporterId   String
  reportedId   String   // userId or contentId
  reportedType ReportedType
  reason       ReportReason
  description  String?
  status       ReportStatus @default(PENDING)
  resolution   String?
  
  createdAt    DateTime @default(now())
  resolvedAt   DateTime?
  
  reporter     User     @relation("Reporter", fields: [reporterId], references: [id])
  reportedUser User?    @relation("ReportedUser", fields: [reportedId], references: [id])
  
  @@index([status])
  @@index([reportedType])
}

enum ReportedType {
  USER
  POST
  OFFER
  MESSAGE
  TRANSACTION
}

enum ReportReason {
  SPAM
  INAPPROPRIATE
  SCAM
  HARASSMENT
  FALSE_INFO
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWING
  RESOLVED
  DISMISSED
}

enum ReviewType {
  OFFER
  USER
  EVENT
}

// ============= REVIEWS =============
model Review {
  id                String     @id @default(uuid())
  reviewerId        String
  reviewType        ReviewType
  reviewedEntityId  String
  rating            Int        // 1-5
  comment           String?
  transactionId     String?

  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  reviewer          User       @relation("ReviewsGiven", fields: [reviewerId], references: [id])

  @@unique([reviewerId, reviewType, reviewedEntityId])
  @@index([reviewType, reviewedEntityId])
  @@index([reviewerId])
}

// ============= ANALYTICS =============
model CommunityMetrics {
  id               String   @id @default(uuid())
  date             DateTime
  area             String   // neighborhood/city
  
  activeUsers      Int
  newUsers         Int
  newConnections   Int
  
  hoursExchanged   Float
  eurosSaved       Float
  creditsCirculated Int
  
  co2Avoided       Float
  wasteReduced     Float
  
  eventsHeld       Int
  groupBuysCompleted Int
  
  helpChains       Int
  averageResponseTime Float // hours
  satisfactionScore Float  // 0-5
  
  weeklyHighlight  String?
  
  createdAt        DateTime @default(now())
  
  @@unique([date, area])
  @@index([date])
  @@index([area])
}

// ============= SYSTEM =============
model SystemConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       Json
  description String?
  updatedAt   DateTime @updatedAt
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String?
  action     String
  entity     String
  entityId   String?
  oldData    Json?
  newData    Json?
  ip         String?
  userAgent  String?

  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([entity, entityId])
  @@index([createdAt])
}

// ============= CONSENSUS & GOVERNANCE (Proof of Help) =============

// Trust Block: Core blockchain structure for community consensus
model TrustBlock {
  id           String      @id @default(uuid())
  height       Int         @unique
  hash         String      @unique
  previousHash String
  type         BlockType
  actorId      String
  content      Json
  nonce        Int
  difficulty   Int
  timestamp    DateTime
  status       BlockStatus @default(PENDING)

  actor        User        @relation("TrustBlockActor", fields: [actorId], references: [id])
  validations  BlockValidation[]
  proposal     Proposal?

  @@index([height])
  @@index([status])
  @@index([timestamp])
  @@index([actorId])
}

enum BlockType {
  HELP         // Time bank transaction
  PROPOSAL     // Community improvement proposal
  VALIDATION   // Meta-validation
  DISPUTE      // Dispute resolution
}

enum BlockStatus {
  PENDING      // Waiting for validation
  APPROVED     // Consensus reached - approved
  REJECTED     // Consensus reached - rejected
}

// Block Validation: Consensus voting by community members
model BlockValidation {
  id          String             @id @default(uuid())
  blockId     String
  validatorId String
  decision    ValidationDecision
  reason      String?
  stake       Int                // Reputation at stake
  createdAt   DateTime           @default(now())

  block       TrustBlock         @relation(fields: [blockId], references: [id])
  validator   User               @relation("BlockValidator", fields: [validatorId], references: [id])

  @@unique([blockId, validatorId])
  @@index([blockId])
  @@index([validatorId])
}

enum ValidationDecision {
  APPROVE
  REJECT
}

// Proposal: Community Improvement Proposals (CIPs)
model Proposal {
  id                 String         @id @default(uuid())
  blockId            String         @unique
  authorId           String
  type               ProposalType
  title              String
  description        String         @db.Text
  requiredBudget     Float?
  implementationPlan String?        @db.Text
  status             ProposalStatus @default(DISCUSSION)
  discussionDeadline DateTime
  votingDeadline     DateTime
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  block              TrustBlock     @relation(fields: [blockId], references: [id])
  author             User           @relation("ProposalAuthor", fields: [authorId], references: [id])
  votes              ProposalVote[]
  comments           ProposalComment[]

  @@index([status])
  @@index([authorId])
  @@index([votingDeadline])
}

enum ProposalType {
  FEATURE             // New functionality
  RULE_CHANGE         // Change in community rules
  FUND_ALLOCATION     // Budget allocation
  PARTNERSHIP         // Partnership with external entity
  COMMUNITY_UPDATE    // Update community settings (name, type, visibility, etc)
  COMMUNITY_DISSOLUTION // Dissolve a community with members
}

enum ProposalStatus {
  DISCUSSION  // Open for discussion
  VOTING      // In voting phase
  APPROVED    // Approved by community
  REJECTED    // Rejected by community
  IMPLEMENTED // Implementation completed
}

// Proposal Vote: Quadratic voting system
model ProposalVote {
  id         String   @id @default(uuid())
  proposalId String
  voterId    String
  points     Int      // Points assigned (quadratic cost)
  cost       Int      // Credits cost (points²)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  proposal   Proposal @relation(fields: [proposalId], references: [id])
  voter      User     @relation("ProposalVoter", fields: [voterId], references: [id])

  @@unique([proposalId, voterId])
  @@index([proposalId])
  @@index([voterId])
}

// Proposal Comment: Discussion threads
model ProposalComment {
  id          String   @id @default(uuid())
  proposalId  String
  authorId    String
  content     String   @db.Text
  parentId    String?  // For threaded discussions
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  proposal    Proposal @relation(fields: [proposalId], references: [id])
  author      User     @relation("ProposalCommentAuthor", fields: [authorId], references: [id])
  parent      ProposalComment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies     ProposalComment[] @relation("CommentReplies")

  @@index([proposalId])
  @@index([authorId])
  @@index([parentId])
}

// Moderation DAO: Decentralized content moderation
model ModerationDAO {
  id            String    @id @default(uuid())
  contentId     String
  contentType   ContentType
  reportReason  String?
  reporterId    String?
  status        DAOStatus @default(VOTING)
  quorum        Int       @default(5)
  deadline      DateTime
  finalDecision String?
  executedAt    DateTime?
  createdAt     DateTime  @default(now())

  reporter      User?     @relation("ModerationReporter", fields: [reporterId], references: [id])
  votes         ModerationVote[]

  @@index([status])
  @@index([deadline])
  @@index([contentType, contentId])
}

enum ContentType {
  POST
  OFFER
  COMMENT
  MESSAGE
  REVIEW
  COMMUNITY
  EVENT
  TIMEBANK
}

enum DAOStatus {
  VOTING    // In voting phase
  EXECUTED  // Decision executed
  CANCELLED // Cancelled (e.g., content removed by author)
}

// Moderation Vote: Jury decision on content
model ModerationVote {
  id       String        @id @default(uuid())
  daoId    String
  voterId  String
  decision ModerationDecision
  reason   String?       @db.Text
  weight   Float         // Weight based on reputation
  createdAt DateTime     @default(now())

  dao      ModerationDAO @relation(fields: [daoId], references: [id])
  voter    User          @relation("ModerationVoter", fields: [voterId], references: [id])

  @@unique([daoId, voterId])
  @@index([daoId])
  @@index([voterId])
}

enum ModerationDecision {
  KEEP    // Keep content as is
  REMOVE  // Remove content
  WARN    // Issue warning to author
}

// ============= FLOW ECONOMICS =============

// Flow Transaction: Tracks value creation through circulation
model FlowTransaction {
  id              String      @id @default(uuid())
  fromUserId      String
  toUserId        String
  baseAmount      Int         // Original credit amount
  flowMultiplier  Float       @default(1.0) // Value multiplier based on flow
  totalValue      Int         // baseAmount * flowMultiplier
  type            FlowType
  description     String?
  reason          CreditReason
  relatedId       String?
  metadata        Json?

  // Flow mechanics
  fromBalance     Int         // From user balance before transaction
  toBalance       Int         // To user balance before transaction
  poolContribution Int       @default(0) // Amount contributed to community pool

  createdAt       DateTime    @default(now())

  fromUser        User        @relation("FlowFrom", fields: [fromUserId], references: [id])
  toUser          User        @relation("FlowTo", fields: [toUserId], references: [id])

  @@index([fromUserId])
  @@index([toUserId])
  @@index([type])
  @@index([createdAt])
}

enum FlowType {
  PEER_TO_PEER      // Direct transaction between users
  COMMUNITY_POOL    // Contribution to pool
  POOL_DISTRIBUTION // Distribution from pool
  DEMURRAGE         // Token decay/oxidation
  FLOW_BONUS        // Extra value from flow multiplier
}

// Community Pool: Collective resources for different purposes
model CommunityPool {
  id              String      @id @default(uuid())
  type            PoolType
  balance         Int         @default(0)
  totalReceived   Int         @default(0)
  totalDistributed Int        @default(0)
  description     String?

  lastDistribution DateTime?

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  contributions   PoolContribution[]
  requests        PoolRequest[]

  @@unique([type])
}

enum PoolType {
  NEEDS         // Emergency needs and basic support
  PROJECTS      // Community projects and initiatives
  EMERGENCY     // Urgent community needs
  CELEBRATION   // Community events and celebrations
  EQUALITY      // Redistribution for economic equality
}

// Pool Contribution: Track individual contributions
model PoolContribution {
  id          String        @id @default(uuid())
  userId      String
  poolId      String
  amount      Int
  reason      String?

  createdAt   DateTime      @default(now())

  user        User          @relation(fields: [userId], references: [id])
  pool        CommunityPool @relation(fields: [poolId], references: [id])

  @@index([userId])
  @@index([poolId])
  @@index([createdAt])
}

// Pool Request Status
enum RequestStatus {
  PENDING       // Waiting for community review
  APPROVED      // Approved by community/admin
  REJECTED      // Rejected by community/admin
  DISTRIBUTED   // Funds distributed to recipient
  CANCELLED     // Cancelled by requester
}

// Pool Request: Request for support from community pools
model PoolRequest {
  id            String         @id @default(uuid())
  userId        String         // User requesting support
  poolId        String         // Pool being requested from
  amount        Int            // Amount requested
  reason        String         // Justification for request
  status        RequestStatus  @default(PENDING)

  // Approval tracking
  approvedBy    String?        // User ID who approved (if manual)
  approvedAt    DateTime?
  rejectedBy    String?
  rejectedAt    DateTime?
  distributedAt DateTime?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user          User           @relation("PoolRequestUser", fields: [userId], references: [id])
  pool          CommunityPool  @relation(fields: [poolId], references: [id])
  votes         PoolRequestVote[]

  @@index([userId])
  @@index([poolId])
  @@index([status])
  @@index([createdAt])
}

// Pool Request Vote: Community voting on pool requests
model PoolRequestVote {
  id          String      @id @default(uuid())
  requestId   String
  voterId     String
  vote        Boolean     // true = approve, false = reject
  comment     String?     // Optional comment explaining vote

  createdAt   DateTime    @default(now())

  request     PoolRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  voter       User        @relation("PoolRequestVoter", fields: [voterId], references: [id])

  @@unique([requestId, voterId]) // One vote per user per request
  @@index([requestId])
  @@index([voterId])
  @@index([createdAt])
}

// Economic Metrics: Track system health and equality over time
model EconomicMetrics {
  id                    String   @id @default(uuid())
  date                  DateTime @unique

  // Equality metrics
  giniIndex             Float    // 0 (perfect equality) to 1 (perfect inequality)
  medianBalance         Int
  meanBalance           Int
  wealthConcentration   Float    // % held by top 10%

  // Flow metrics
  transactionsCount     Int
  averageFlowMultiplier Float
  totalValueGenerated   Int      // Extra value from flow multipliers

  // Pool metrics
  totalPoolBalance      Int
  poolDistributions     Int

  // Activity metrics
  activeUsers           Int
  generousUsers         Int      // Users with positive generosity score

  createdAt             DateTime @default(now())

  @@index([date])
  @@index([giniIndex])
}

// ============================================
// VIRAL ENGAGEMENT FEATURES
// ============================================

// Flash Deal Status
enum FlashDealStatus {
  ACTIVE
  EXPIRED
  SOLD_OUT
}

// Story Type
enum StoryType {
  HELP_REQUEST
  ACHIEVEMENT
  DEAL
  EVENT
  GENERAL
}

// Swipe Direction
enum SwipeDirection {
  LEFT      // Not interested
  RIGHT     // Interested
  SUPER     // Super interested
}

// Live Event Status
enum LiveEventStatus {
  ANNOUNCED
  ACTIVE
  COMPLETED
  CANCELLED
}

// Flash Deals: Limited-time offers that create FOMO
model FlashDeal {
  id              String          @id @default(uuid())
  merchantId      String
  title           String          // Título del deal
  discount        Int             // Percentage discount
  originalPrice   Int?
  finalPrice      Int?
  product         String
  description     String?
  maxRedemptions  Int
  currentRedemptions Int          @default(0)
  status          FlashDealStatus @default(ACTIVE)

  expiresAt       DateTime
  createdAt       DateTime        @default(now())

  merchant        Merchant        @relation(fields: [merchantId], references: [id])
  redemptions     FlashDealRedemption[]

  @@index([merchantId])
  @@index([status])
  @@index([expiresAt])
}

// Flash Deal Redemptions
model FlashDealRedemption {
  id          String    @id @default(uuid())
  dealId      String
  userId      String
  redeemedAt  DateTime  @default(now())

  deal        FlashDeal @relation(fields: [dealId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@index([dealId])
  @@index([userId])
}

// Stories: 24-hour content like Instagram
model Story {
  id          String      @id @default(uuid())
  userId      String
  type        StoryType
  content     String
  media       String?     // Image or video URL
  cta         Json?       // Call-to-action button

  views       Int         @default(0)
  expiresAt   DateTime
  createdAt   DateTime    @default(now())

  user        User        @relation(fields: [userId], references: [id])
  reactions   StoryReaction[]
  viewers     StoryView[]

  @@index([userId])
  @@index([expiresAt])
  @@index([createdAt])
}

// Story Reactions
model StoryReaction {
  id          String    @id @default(uuid())
  storyId     String
  userId      String
  reaction    String    // Emoji
  createdAt   DateTime  @default(now())

  story       Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id])

  @@unique([storyId, userId])
  @@index([storyId])
  @@index([userId])
}

// Story Views
model StoryView {
  id          String    @id @default(uuid())
  storyId     String
  userId      String
  viewedAt    DateTime  @default(now())

  story       Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id])

  @@unique([storyId, userId])
  @@index([storyId])
}

// Swipes: Tinder-style matchmaking for offers
model Swipe {
  id          String          @id @default(uuid())
  userId      String
  offerId     String
  direction   SwipeDirection
  createdAt   DateTime        @default(now())

  user        User            @relation(fields: [userId], references: [id])
  offer       Offer           @relation(fields: [offerId], references: [id])

  @@unique([userId, offerId])
  @@index([userId])
  @@index([offerId])
  @@index([createdAt])
}

// Matches: Mutual interest between users
model Match {
  id          String    @id @default(uuid())
  user1Id     String
  user2Id     String
  offerId     String?
  isSuper     Boolean   @default(false)
  chatOpened  Boolean   @default(false)

  createdAt   DateTime  @default(now())

  user1       User      @relation("MatchUser1", fields: [user1Id], references: [id])
  user2       User      @relation("MatchUser2", fields: [user2Id], references: [id])
  offer       Offer?    @relation(fields: [offerId], references: [id])

  @@unique([user1Id, user2Id])
  @@index([user1Id])
  @@index([user2Id])
}

// Weekly Challenges
model WeeklyChallenge {
  id          String    @id @default(uuid())
  type        String    // HELP_STREAK, ECO_WARRIOR, CONNECTOR
  title       String
  description String
  targetValue Int       // Target value to complete the challenge
  reward      Int       // Credits reward
  bonusFirst  Int       // Bonus for top 3

  participants Int      @default(0)
  startsAt    DateTime
  endsAt      DateTime
  createdAt   DateTime  @default(now())

  participations ChallengeParticipant[]

  @@index([startsAt])
  @@index([endsAt])
}

// Challenge Participants
model ChallengeParticipant {
  id            String          @id @default(uuid())
  challengeId   String
  userId        String
  progress      Int             @default(0)
  completed     Boolean         @default(false)
  completedAt   DateTime?

  createdAt     DateTime        @default(now())

  challenge     WeeklyChallenge @relation(fields: [challengeId], references: [id])
  user          User            @relation(fields: [userId], references: [id])

  @@unique([challengeId, userId])
  @@index([challengeId])
  @@index([userId])
}

// Referral Codes
model ReferralCode {
  id                      String    @id @default(uuid())
  userId                  String
  code                    String    @unique
  rewardForReferrer       Int
  rewardForReferred       Int
  bonusOnFirstTransaction Int

  usedCount               Int       @default(0)
  maxUses                 Int?
  expiresAt               DateTime?
  createdAt               DateTime  @default(now())

  user                    User      @relation("ReferralCodeOwner", fields: [userId], references: [id])
  referrals               Referral[]

  @@index([userId])
  @@index([code])
}

// Referrals
model Referral {
  id              String        @id @default(uuid())
  codeId          String
  referredUserId  String
  rewardGranted   Boolean       @default(false)
  bonusGranted    Boolean       @default(false)

  createdAt       DateTime      @default(now())

  code            ReferralCode  @relation(fields: [codeId], references: [id])
  referredUser    User          @relation("ReferralReferred", fields: [referredUserId], references: [id])

  @@index([codeId])
  @@index([referredUserId])
}

// Live Events
model LiveEvent {
  id          String          @id @default(uuid())
  type        String          // AUCTION, FLASH_MOB, COMMUNITY_VOTE, TREASURE_HUNT
  title       String
  description String?
  prizes      Json

  status      LiveEventStatus @default(ANNOUNCED)
  participants Int            @default(0)

  startsAt    DateTime
  endsAt      DateTime
  createdAt   DateTime        @default(now())

  participations LiveEventParticipant[]

  @@index([status])
  @@index([startsAt])
}

// Live Event Participants
model LiveEventParticipant {
  id          String    @id @default(uuid())
  eventId     String
  userId      String
  joinedAt    DateTime  @default(now())
  score       Int?
  won         Boolean   @default(false)

  event       LiveEvent @relation(fields: [eventId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
}

// Micro Actions Tracking
model MicroAction {
  id          String    @id @default(uuid())
  userId      String
  action      String    // OPEN_APP, CHECK_MAP, VIEW_OFFER, etc.
  reward      Int
  metadata    Json?

  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

// Feature Unlocks
model UserFeatureUnlock {
  id          String    @id @default(uuid())
  userId      String
  feature     String    // MAPA_LOCAL, PRIMERA_OFERTA, STORIES, etc.
  unlockedAt  DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id])

  @@unique([userId, feature])
  @@index([userId])
}

// Onboarding Progress
model OnboardingProgress {
  id              String    @id @default(uuid())
  userId          String    @unique
  currentStep     Int       @default(1)
  completed       Boolean   @default(false)
  completedSteps  Json      @default("[]")

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  completedAt     DateTime?

  user            User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([completed])
}
// ============= SISTEMA HÍBRIDO DE CAPAS ECONÓMICAS =============

// Historial de migraciones entre capas económicas
model LayerMigration {
  id               String        @id @default(uuid())
  userId           String
  fromLayer        EconomicLayer
  toLayer          EconomicLayer
  reason           String?
  creditsConverted Int?          // Créditos donados/convertidos al migrar
  migratedAt       DateTime      @default(now())

  user             User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([migratedAt])
}

// Eventos puente que facilitan experimentar con otras capas
model BridgeEvent {
  id                String           @id @default(uuid())
  communityId       String?
  type              BridgeEventType
  title             String
  description       String

  // Durante el evento, todos funcionan en esta capa
  forceLayer        EconomicLayer?

  startsAt          DateTime
  endsAt            DateTime
  recurring         Boolean          @default(false)
  frequency         String?          // "FIRST_SUNDAY", "EQUINOX", etc

  participantsCount Int              @default(0)

  createdAt         DateTime         @default(now())

  @@index([communityId])
  @@index([type])
  @@index([startsAt])
}

enum BridgeEventType {
  GIFT_DAY         // Día de regalo: todo gratis
  DEBT_AMNESTY     // Amnistía de deudas
  ABUNDANCE_FEST   // Festival de abundancia de un recurso
  LAYER_EXPERIMENT // Experimento temporal de otra capa
}

// Anuncios de abundancia (para capa regalo y transicional)
model AbundanceAnnouncement {
  id           String    @id @default(uuid())
  communityId  String?

  // En regalo puro, NO se registra quién da
  providerId   String?

  what         String    // "Tomates", "Tiempo libre", "Herramientas"
  quantity     String?   // "Muchos", "Algunos", o número si es tradicional
  where        String    // "Punto común", "Casa azul", coords
  lat          Float?
  lng          Float?

  availableUntil DateTime?

  // Visibilidad según capa
  visibleToLayers String[] // Array de EconomicLayer

  takenBy      String[]  // IDs de quienes recibieron (solo si no es regalo puro)

  createdAt    DateTime  @default(now())
  expiresAt    DateTime?

  @@index([communityId])
  @@index([createdAt])
}

// Expresiones de necesidad (para capa regalo)
model NeedExpression {
  id           String    @id @default(uuid())
  communityId  String?

  // En regalo puro, puede ser anónimo
  requesterId  String?

  what         String
  why          String?   // Contexto, no obligatorio
  where        String?   // Área general, no específica
  urgency      String?   // "URGENT", "SOON", "WHENEVER"

  // Visibilidad
  visibleToLayers String[] // Array de EconomicLayer

  fulfilledBy  String[]  // IDs de quienes ayudaron
  fulfilledAt  DateTime?

  createdAt    DateTime  @default(now())
  expiresAt    DateTime?

  @@index([communityId])
  @@index([createdAt])
}

// Celebraciones anónimas (para regalo puro y transicional)
model AnonymousCelebration {
  id           String    @id @default(uuid())
  communityId  String?

  event        String    // "Una necesidad se encontró con abundancia"
  description  String?
  emoji        String?   // 🎉, ✨, 💝

  // NO registra quiénes participaron específicamente
  approximateParticipants Int?

  createdAt    DateTime  @default(now())

  @@index([communityId])
  @@index([createdAt])
}

// Configuración de capa a nivel comunidad
model CommunityLayerConfig {
  id                String        @id @default(uuid())
  communityId       String        @unique

  // Capa por defecto para nuevos miembros
  defaultLayer      EconomicLayer @default(TRADITIONAL)

  // ¿Permite modo mixto?
  allowMixedMode    Boolean       @default(true)

  // Distribución actual de usuarios por capa
  traditionalCount  Int           @default(0)
  transitionalCount Int           @default(0)
  giftCount         Int           @default(0)
  chameleonCount    Int           @default(0)

  // Eventos puente automáticos
  autoGiftDays      Boolean       @default(true)
  autoDebtAmnesty   Boolean       @default(true)

  // Umbrales para proponer migración comunitaria
  giftThreshold     Int           @default(60) // % para proponer migración a regalo

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([communityId])
}

// ============= HOUSING & COLLABORATIVE SPACES =============

// Banco de Espacios: Compartir espacios físicos por tiempo
model SpaceBank {
  id            String    @id @default(uuid())
  ownerId       String
  communityId   String?

  // Space Details
  type          SpaceType
  title         String
  description   String
  images        String[]

  // Location
  address       String?
  lat           Float?
  lng           Float?
  accessInstructions String?

  // Capacity & Features
  capacity      Int?      // personas/items que caben
  squareMeters  Float?
  features      String[]  // ["wifi", "luz natural", "calefacción", etc]
  equipment     String[]  // herramientas/equipamiento disponible

  // Availability
  availableDays String[]  // ["monday", "tuesday", etc]
  availableHours Json     // {start: "09:00", end: "18:00"}
  minBookingHours Float   @default(1)
  maxBookingHours Float?

  // Exchange (3 capas económicas)
  exchangeType  ExchangeType
  pricePerHour  Float?    // EUR
  creditsPerHour Int?     // Credits
  hoursPerHour  Float?    // Time credits (1:1 normalmente)
  isFree        Boolean   @default(false) // Gift economy

  // Requirements
  minReputation Int       @default(0)
  requiresApproval Boolean @default(false)

  // Rules
  rules         String[]

  status        SpaceStatus @default(ACTIVE)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  owner         User      @relation("SpaceOwner", fields: [ownerId], references: [id])
  community     Community? @relation(fields: [communityId], references: [id])
  bookings      SpaceBooking[]

  @@index([ownerId])
  @@index([communityId])
  @@index([type])
  @@index([status])
  @@index([lat, lng])
}

model SpaceBooking {
  id          String    @id @default(uuid())
  spaceId     String
  bookerId    String

  startTime   DateTime
  endTime     DateTime
  hours       Float

  // Payment
  paidEur     Float?
  paidCredits Int?
  paidHours   Float?

  status      BookingStatus @default(PENDING)

  // Validation (Proof of Help)
  validated   Boolean   @default(false)
  witnessIds  String[]
  validatedAt DateTime?

  // Review
  rating      Int?      // 1-5
  review      String?

  canceledAt  DateTime?
  cancelReason String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  space       SpaceBank @relation(fields: [spaceId], references: [id])
  booker      User      @relation("SpaceBooker", fields: [bookerId], references: [id])

  @@index([spaceId])
  @@index([bookerId])
  @@index([startTime])
  @@index([status])
}

// Hospedaje Temporal: Vivienda de corta duración
model TemporaryHousing {
  id            String    @id @default(uuid())
  hostId        String
  communityId   String?

  type          HousingType
  title         String
  description   String
  images        String[]

  // Location
  address       String?
  lat           Float?
  lng           Float?
  accessInstructions String?

  // Space details
  accommodationType AccommodationType // PRIVATE_ROOM, SHARED_ROOM, ENTIRE_PLACE
  beds          Int       @default(1)
  bathrooms     Float     @default(1)
  squareMeters  Float?

  // Amenities
  amenities     String[]  // ["wifi", "kitchen", "washing_machine", etc]
  houseRules    String[]

  // Availability
  availableFrom DateTime
  availableTo   DateTime
  minNights     Int       @default(1)
  maxNights     Int?

  // Exchange (3 capas económicas)
  exchangeType  ExchangeType
  pricePerNight Float?    // EUR
  creditsPerNight Int?    // Credits
  hoursPerNight Float?    // Time credits
  isFree        Boolean   @default(false)

  // Requirements
  minReputation Int       @default(10)
  requiresApproval Boolean @default(true)
  maxGuests     Int       @default(1)

  // Insurance/Safety
  communityInsured Boolean @default(true) // cubierto por fondo DAO
  emergencyContact String?

  status        HousingStatus @default(ACTIVE)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  host          User      @relation("HousingHost", fields: [hostId], references: [id])
  community     Community? @relation(fields: [communityId], references: [id])
  bookings      HousingBooking[]

  @@index([hostId])
  @@index([communityId])
  @@index([type])
  @@index([status])
  @@index([availableFrom, availableTo])
  @@index([lat, lng])
}

model HousingBooking {
  id          String    @id @default(uuid())
  housingId   String
  guestId     String

  checkIn     DateTime
  checkOut    DateTime
  nights      Int
  guests      Int       @default(1)

  // Payment
  paidEur     Float?
  paidCredits Int?
  paidHours   Float?

  status      BookingStatus @default(PENDING)

  // Messages
  guestMessage String?   // mensaje inicial del guest
  hostResponse String?

  // Validation
  validated   Boolean   @default(false)
  witnessIds  String[]
  validatedAt DateTime?

  // Reviews (bidirectional)
  guestRating Int?
  guestReview String?
  hostRating  Int?
  hostReview  String?

  canceledAt  DateTime?
  cancelReason String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  housing     TemporaryHousing @relation(fields: [housingId], references: [id])
  guest       User      @relation("HousingGuest", fields: [guestId], references: [id])

  @@index([housingId])
  @@index([guestId])
  @@index([checkIn])
  @@index([status])
}

// Cooperativa de Vivienda: Modelo de co-housing a largo plazo
model HousingCoop {
  id            String    @id @default(uuid())
  communityId   String?

  name          String
  description   String
  vision        String    // Visión compartida de la cooperativa
  images        String[]

  type          CoopType

  // Location (puede ser futura)
  address       String?
  lat           Float?
  lng           Float?
  locationConfirmed Boolean @default(false)

  // Capacity
  minMembers    Int       @default(5)
  maxMembers    Int
  currentMembers Int      @default(0)

  // Financial
  totalBudget   Float?    // Presupuesto total estimado
  currentFunds  Float     @default(0)
  monthlyContribution Float? // Contribución mensual por miembro

  // Governance
  governance    GovernanceType
  decisionThreshold Float  @default(0.66) // % necesario para decisiones importantes

  // Shared spaces
  sharedSpaces  String[]  // ["cocina", "salón", "jardín", "taller"]
  privateSpaces String[]  // ["habitaciones", "baños privados"]

  // Rules
  communityRules String[]
  entryCriteria  Json     // Criterios de entrada

  // Timeline
  phase         CoopPhase @default(FORMING)
  targetMoveIn  DateTime?

  status        CoopStatus @default(OPEN)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  community     Community? @relation(fields: [communityId], references: [id])
  members       HousingCoopMember[]
  proposals     HousingCoopProposal[]

  @@index([communityId])
  @@index([status])
  @@index([phase])
  @@index([currentMembers, maxMembers])
}

model HousingCoopMember {
  id          String    @id @default(uuid())
  coopId      String
  userId      String

  role        CoopMemberRole @default(MEMBER)
  status      MemberStatus @default(PENDING)

  // Financial contribution
  monthlyContribution Float?
  contributionType ExchangeType @default(EUR)
  totalContributed Float   @default(0)

  // Commitment
  commitmentLevel String?  // "full-time", "part-time", "visiting"
  skills          String[] // Habilidades que aporta
  availability    String?

  // Application
  applicationMessage String?
  approvedBy      String[]  // UserIds que aprobaron
  approvalVotes   Int      @default(0)
  rejectionVotes  Int      @default(0)

  joinedAt    DateTime?
  leftAt      DateTime?
  leaveReason String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  coop        HousingCoop @relation(fields: [coopId], references: [id])
  member      User      @relation("CoopMember", fields: [userId], references: [id])

  @@unique([coopId, userId])
  @@index([coopId])
  @@index([userId])
  @@index([status])
}

model HousingCoopProposal {
  id          String    @id @default(uuid())
  coopId      String
  creatorId   String

  type        CoopProposalType
  title       String
  description String

  // Proposal details
  budget      Float?
  timeline    String?
  implementation String?

  // For member applications
  applicantId String?

  // Voting (Quadratic)
  status      ProposalStatus @default(DISCUSSION)
  votingStartsAt DateTime?
  votingEndsAt   DateTime?

  requiredVotes Int        // Votos necesarios para aprobar
  currentVotes  Int        @default(0)

  approvedAt  DateTime?
  rejectedAt  DateTime?
  implementedAt DateTime?

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  coop        HousingCoop @relation(fields: [coopId], references: [id])
  creator     User      @relation("ProposalCreator", fields: [creatorId], references: [id])
  votes       HousingCoopVote[]

  @@index([coopId])
  @@index([creatorId])
  @@index([status])
  @@index([type])
}

model HousingCoopVote {
  id          String    @id @default(uuid())
  proposalId  String
  voterId     String

  points      Int       // Quadratic voting
  decision    VoteDecision
  reason      String?

  createdAt   DateTime  @default(now())

  proposal    HousingCoopProposal @relation(fields: [proposalId], references: [id])
  voter       User      @relation("CoopVoter", fields: [voterId], references: [id])

  @@unique([proposalId, voterId])
  @@index([proposalId])
  @@index([voterId])
}

// Garantía Comunitaria: Aval para acceder a vivienda tradicional
model CommunityGuarantee {
  id            String    @id @default(uuid())
  userId        String    // Persona avalada
  communityId   String?

  // Landlord/Property info
  landlordName  String?
  landlordEmail String?
  landlordPhone String?
  propertyAddress String
  monthlyRent   Float

  // Guarantee details
  coverageMonths Int      @default(3) // Cuántos meses cubre
  maxCoverage   Float     // Monto máximo que cubre

  // Requirements met
  reputation    Int       // Reputación al momento de solicitar
  guarantors    GuaranteeSupporter[]

  status        GuaranteeStatus @default(PENDING)

  // DAO fund
  fundAllocated Float?
  fundUsed      Float     @default(0)

  // Activation
  activatedAt   DateTime?
  expiresAt     DateTime?

  // Claims
  claimsCount   Int       @default(0)
  lastClaimAt   DateTime?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User      @relation("GuaranteedPerson", fields: [userId], references: [id])
  community     Community? @relation(fields: [communityId], references: [id])

  @@index([userId])
  @@index([communityId])
  @@index([status])
}

model GuaranteeSupporter {
  id          String    @id @default(uuid())
  guaranteeId String
  supporterId String

  // Commitment
  monthsCommitted Int    @default(1)
  amountCommitted Float  // Cuánto está dispuesto a aportar

  status      SupportStatus @default(ACTIVE)

  // If claim is made
  amountPaid  Float     @default(0)
  paidAt      DateTime?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  guarantee   CommunityGuarantee @relation(fields: [guaranteeId], references: [id])
  supporter   User      @relation("Guarantor", fields: [supporterId], references: [id])

  @@unique([guaranteeId, supporterId])
  @@index([guaranteeId])
  @@index([supporterId])
}

// ============= ENUMS FOR HOUSING =============

enum SpaceType {
  ROOM          // Habitación
  STORAGE       // Almacén/trastero
  WORKSHOP      // Taller
  GARDEN        // Jardín
  PARKING       // Parking
  STUDIO        // Estudio
  KITCHEN       // Cocina compartida
  OFFICE        // Oficina
  VENUE         // Local para eventos
  OTHER
}

enum HousingType {
  EMERGENCY     // Emergencia/crisis
  TRANSITION    // Transición temporal
  EXCHANGE      // Intercambio entre comunidades
  NOMAD         // Nómadas digitales
  GUEST         // Invitados
  OTHER
}

enum AccommodationType {
  PRIVATE_ROOM
  SHARED_ROOM
  ENTIRE_PLACE
  COUCH
}

enum ExchangeType {
  EUR           // Dinero tradicional
  CREDITS       // Créditos internos
  TIME_HOURS    // Horas de banco de tiempo
  MIXED         // Combinación
  FREE          // Economía de regalo
}

enum SpaceStatus {
  ACTIVE
  PAUSED
  INACTIVE
}

enum HousingStatus {
  ACTIVE
  BOOKED
  PAUSED
  INACTIVE
}

enum BookingStatus {
  PENDING
  APPROVED
  CONFIRMED
  CHECKED_IN
  COMPLETED
  CANCELED
  REJECTED
}

enum CoopType {
  RENT_COLLECTIVE      // Alquiler colectivo
  BUY_COLLECTIVE       // Compra colectiva
  COMMUNITY_LAND_TRUST // CLT
  COHOUSING           // Co-vivienda nueva construcción
  RETROFIT            // Rehabilitación colectiva
}

enum GovernanceType {
  CONSENSUS            // Consenso total
  QUADRATIC_VOTING     // Votación cuadrática
  SIMPLE_MAJORITY      // Mayoría simple
  SUPER_MAJORITY       // Super mayoría (66%)
  ROTATING_ADMIN       // Administración rotativa
}

enum CoopPhase {
  FORMING       // Formación inicial
  FUNDING       // Búsqueda de fondos
  PROPERTY_SEARCH // Búsqueda de propiedad
  PURCHASING    // Proceso de compra
  BUILDING      // Construcción/reforma
  MOVE_IN       // Mudanza
  ESTABLISHED   // Establecida
}

enum CoopStatus {
  OPEN          // Abierta a nuevos miembros
  CLOSED        // Cerrada
  FULL          // Llena
  ACTIVE        // Activa
  ARCHIVED      // Archivada
}

enum CoopMemberRole {
  FOUNDER
  COORDINATOR
  MEMBER
  CANDIDATE
}

enum MemberStatus {
  PENDING       // Solicitud pendiente
  APPROVED      // Aprobado
  ACTIVE        // Miembro activo
  INACTIVE      // Inactivo temporal
  LEFT          // Se fue
  EXPELLED      // Expulsado
}

enum CoopProposalType {
  MEMBER_APPLICATION  // Solicitud de nuevo miembro
  BUDGET_ALLOCATION   // Asignación de presupuesto
  PROPERTY_SELECTION  // Selección de propiedad
  DESIGN_DECISION     // Decisión de diseño
  RULE_CHANGE        // Cambio de reglas
  MAJOR_EXPENSE      // Gasto mayor
  CONFLICT_RESOLUTION // Resolución de conflicto
  OTHER
}

enum GuaranteeStatus {
  PENDING
  ACTIVE
  CLAIMED
  EXPIRED
  CANCELED
}

enum SupportStatus {
  ACTIVE
  FULFILLED
  WITHDRAWN
}

enum VoteDecision {
  APPROVE
  REJECT
  ABSTAIN
}

// ============================================
// NEEDS & COMMUNITY PROJECTS
// Sistema de Necesidades y Ayuda Mutua
// ============================================

model Need {
  id              String       @id @default(uuid())

  // Ownership - puede ser personal o comunitaria
  creatorId       String?      // Usuario que crea la necesidad
  communityId     String?      // o Comunidad que la crea

  scope           NeedScope    // PERSONAL, COMMUNITY, INTERCOMMUNITY, GLOBAL
  category        NeedCategory // URGENT, CHRONIC, PROJECT, EMERGENCY
  type            NeedType     // FOOD, HOUSING, HEALTH, EDUCATION, etc.

  title           String
  description     String
  images          String[]     @default([])

  // Location
  location        String?
  latitude        Float?
  longitude       Float?
  country         String?      // Para proyectos globales (ej: "India", "Ghana")

  // Resource requirements
  resourceTypes   ResourceType[] // EUR, CREDITS, TIME_HOURS, SKILLS, MATERIALS
  targetEur       Float?
  targetCredits   Int?
  targetHours     Float?
  neededSkills    String[]     @default([])  // ["carpintería", "enfermería"]
  neededMaterials Json?        // { "cemento": "100kg", "madera": "50m" }

  // Progress tracking
  currentEur      Float        @default(0)
  currentCredits  Int          @default(0)
  currentHours    Float        @default(0)
  contributorsCount Int        @default(0)

  // Timeline
  urgencyLevel    Int          @default(1)   // 1-5 scale
  deadline        DateTime?

  status          NeedStatus   @default(OPEN)

  // Proof of Need
  verificationDocs String[]    @default([])  // Documentos de verificación
  isVerified      Boolean      @default(false)
  verifiedBy      String?
  verifiedAt      DateTime?

  // Matching with offers
  relatedOffers   String[]     @default([])  // IDs de ofertas que podrían ayudar

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  closedAt        DateTime?

  // Relations
  creator         User?        @relation("NeedCreator", fields: [creatorId], references: [id])
  community       Community?   @relation("CommunityNeeds", fields: [communityId], references: [id])
  contributions   Contribution[]

  @@index([scope])
  @@index([category])
  @@index([type])
  @@index([status])
  @@index([creatorId])
  @@index([communityId])
  @@index([latitude, longitude])
  @@index([deadline])
}

model CommunityProject {
  id              String          @id @default(uuid())

  // Ownership
  creatorId       String
  communityId     String?         // Comunidad principal organizadora

  // Project info
  type            ProjectType
  title           String
  description     String
  vision          String          // Visión de impacto a largo plazo
  images          String[]        @default([])
  videoUrl        String?

  // Location - puede ser global
  location        String
  latitude        Float?
  longitude       Float?
  country         String          // ej: "Ghana", "India", "España"
  region          String?         // ej: "Navarra", "Karnataka"

  // Objectives
  beneficiaries   Int?            // Número de personas beneficiadas
  impactGoals     String[]        @default([])  // Objetivos de impacto

  // Resources
  targetEur       Float?
  targetCredits   Int?
  targetHours     Float?
  targetSkills    String[]        @default([])
  materialNeeds   Json?

  currentEur      Float           @default(0)
  currentCredits  Int             @default(0)
  currentHours    Float           @default(0)

  // Participation
  participatingCommunities String[] @default([])  // IDs de comunidades participantes
  contributorsCount        Int      @default(0)
  volunteersNeeded         Int?
  volunteersEnrolled       Int      @default(0)

  // Timeline
  startDate       DateTime?
  endDate         DateTime?
  estimatedMonths Int?

  status          ProjectStatus   @default(FORMING)
  completionRate  Float           @default(0.0)  // 0.0 - 1.0

  // Transparency & Verification
  isVerified      Boolean         @default(false)
  verifiedBy      String?
  organizationName String?        // ONG o grupo local responsable
  contactEmail    String?
  websiteUrl      String?

  // Tags for discovery
  tags            String[]        @default([])  // ["education", "water", "auzolan"]
  sdgGoals        Int[]           @default([])  // ODS de la ONU [4, 6, 11]

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  completedAt     DateTime?

  // Relations
  creator         User            @relation("ProjectCreator", fields: [creatorId], references: [id])
  community       Community?      @relation("CommunityProjects", fields: [communityId], references: [id])
  phases          ProjectPhase[]
  contributions   Contribution[]
  updates         ProjectUpdate[]
  impactReports   ImpactReport[]

  @@index([type])
  @@index([status])
  @@index([country])
  @@index([creatorId])
  @@index([communityId])
  @@index([tags])
}

model ProjectPhase {
  id              String          @id @default(uuid())
  projectId       String

  name            String
  description     String
  order           Int             // 1, 2, 3...

  targetEur       Float?
  targetCredits   Int?
  targetHours     Float?

  currentEur      Float           @default(0)
  currentCredits  Int             @default(0)
  currentHours    Float           @default(0)

  startDate       DateTime?
  endDate         DateTime?

  status          PhaseStatus     @default(PENDING)
  completionRate  Float           @default(0.0)

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  completedAt     DateTime?

  // Relations
  project         CommunityProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
}

model Contribution {
  id              String          @id @default(uuid())

  // Contributor - puede ser usuario o comunidad
  userId          String?
  communityId     String?

  // Target - puede ser necesidad o proyecto
  needId          String?
  projectId       String?
  phaseId         String?

  // Contribution type
  contributionType ContributionType

  // Amounts
  amountEur       Float?
  amountCredits   Int?
  amountHours     Float?
  skillsOffered   String[]        @default([])
  materialsOffered Json?
  equipmentOffered String[]       @default([])

  // Details
  message         String?
  isAnonymous     Boolean         @default(false)
  isRecurring     Boolean         @default(false)
  recurringMonths Int?

  // Status
  status          ContributionStatus @default(PENDING)

  // Proof & Validation
  proofDocuments  String[]        @default([])
  validatedAt     DateTime?
  validatedBy     String?

  // Recognition
  recognitionPost String?         // ID del post de agradecimiento
  impactStory     String?

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  completedAt     DateTime?
  refundedAt      DateTime?

  // Relations
  user            User?           @relation("Contributor", fields: [userId], references: [id])
  community       Community?      @relation("CommunityContributions", fields: [communityId], references: [id])
  need            Need?           @relation(fields: [needId], references: [id], onDelete: Cascade)
  project         CommunityProject? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([communityId])
  @@index([needId])
  @@index([projectId])
  @@index([status])
  @@index([contributionType])
}

model ProjectUpdate {
  id              String          @id @default(uuid())
  projectId       String
  authorId        String

  title           String
  content         String
  images          String[]        @default([])
  videoUrl        String?

  // Metrics update
  progressUpdate  Float?          // New completion percentage
  fundsUsed       Float?
  beneficiariesReached Int?

  // Highlights
  milestones      String[]        @default([])
  challenges      String?
  nextSteps       String?

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  project         CommunityProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  author          User            @relation("UpdateAuthor", fields: [authorId], references: [id])

  @@index([projectId])
  @@index([authorId])
  @@index([createdAt])
}

model ImpactReport {
  id              String          @id @default(uuid())
  projectId       String
  authorId        String

  title           String
  summary         String

  // Impact metrics
  impactLevel     ImpactLevel
  beneficiariesReached Int
  jobsCreated     Int?
  co2Avoided      Float?
  waterLitersProvided Float?
  peopleEducated  Int?
  customMetrics   Json?           // Métricas específicas del proyecto

  // Evidence
  photos          String[]        @default([])
  videos          String[]        @default([])
  testimonials    Json[]          @default([])  // { name, quote, photo }
  documents       String[]        @default([])

  // Long-term tracking
  sustainabilityPlan String?
  futureGoals     String[]        @default([])

  // Verification
  isVerified      Boolean         @default(false)
  verifiedBy      String?
  verificationDocs String[]       @default([])

  publishedAt     DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  project         CommunityProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  author          User            @relation("ReportAuthor", fields: [authorId], references: [id])

  @@index([projectId])
  @@index([authorId])
  @@index([impactLevel])
  @@index([publishedAt])
}

// ============================================
// ENUMS for Needs & Projects
// ============================================

enum NeedScope {
  PERSONAL          // Necesidad individual
  COMMUNITY         // Necesidad de una comunidad
  INTERCOMMUNITY    // Entre comunidades cercanas
  GLOBAL            // Proyectos globales
}

enum NeedCategory {
  URGENT            // Urgente (< 1 semana)
  CHRONIC           // Crónica (necesidad continua)
  PROJECT           // Proyecto con timeline
  EMERGENCY         // Emergencia (< 24h)
}

enum NeedType {
  FOOD              // Alimentos
  HOUSING           // Vivienda
  HEALTH            // Salud
  EDUCATION         // Educación
  INFRASTRUCTURE    // Infraestructura
  WATER             // Agua potable
  ENERGY            // Energía
  SANITATION        // Saneamiento
  LIVELIHOOD        // Medios de vida
  ENVIRONMENT       // Medio ambiente
  CULTURE           // Cultura
  TECHNOLOGY        // Tecnología
  LEGAL             // Legal
  OTHER
}

enum ResourceType {
  EUR               // Dinero fiduciario
  CREDITS           // Créditos de la plataforma
  TIME_HOURS        // Horas del banco de tiempo
  SKILLS            // Habilidades específicas
  MATERIALS         // Materiales de construcción, etc.
  EQUIPMENT         // Equipamiento
  TRANSPORTATION    // Transporte
  LAND              // Tierra/terreno
}

enum NeedStatus {
  OPEN              // Abierta, recibiendo ayuda
  PARTIALLY_FILLED  // Parcialmente cubierta
  FILLED            // Completamente cubierta
  CLOSED            // Cerrada (ya no necesita ayuda)
  CANCELLED         // Cancelada
}

enum ProjectType {
  INFRASTRUCTURE    // Escuela, centro comunitario, etc.
  WATER_SANITATION  // Pozos, purificación de agua
  EDUCATION         // Programas educativos
  HEALTH            // Clínicas, salud comunitaria
  ENVIRONMENT       // Reforestación, limpieza
  AGRICULTURE       // Huertos comunitarios, cooperativas
  ENERGY            // Paneles solares, energía renovable
  HOUSING           // Vivienda colectiva
  AUZOLAN           // Trabajo comunitario tradicional
  CULTURAL          // Proyectos culturales
  TECHNOLOGY        // Acceso a tecnología
  EMERGENCY_RELIEF  // Ayuda en emergencias
  OTHER
}

enum ProjectStatus {
  FORMING           // En formación
  FUNDING           // Buscando fondos
  READY             // Listo para empezar
  EXECUTING         // En ejecución
  COMPLETED         // Completado
  PAUSED            // Pausado temporalmente
  CANCELLED         // Cancelado
}

enum PhaseStatus {
  PENDING           // Pendiente
  ACTIVE            // En curso
  COMPLETED         // Completada
  SKIPPED           // Saltada
}

enum ContributionType {
  MONETARY          // Dinero (EUR/CREDITS)
  TIME              // Tiempo
  SKILLS            // Habilidades
  MATERIALS         // Materiales
  EQUIPMENT         // Equipamiento
  MIXED             // Combinación
}

enum ContributionStatus {
  PENDING           // Pendiente de validación
  ACTIVE            // Activa (para contribuciones recurrentes)
  COMPLETED         // Completada
  REFUNDED          // Reembolsada
  CANCELLED         // Cancelada
}

enum ImpactLevel {
  LOW               // Impacto bajo (< 50 personas)
  MEDIUM            // Impacto medio (50-500 personas)
  HIGH              // Impacto alto (500-5000 personas)
  TRANSFORMATIVE    // Transformador (> 5000 personas)
}

// ============= GAILU LABS FEDERATION =============

// Nodos federados en el ecosistema Gailu Labs
model FederatedNode {
  id              String   @id @default(uuid())
  nodeId          String   @unique  // Identificador único del nodo (ej: "spiral-bank")
  name            String              // Nombre del nodo (ej: "Spiral Bank")
  type            NodeType            // Tipo de nodo en el ecosistema
  url             String              // URL base del nodo (ej: "https://spiral-bank.gailu.org")
  publicKey       String              // Clave pública para verificación de firmas
  description     String?
  location        String?
  status          NodeStatus @default(ACTIVE)

  // Configuración de federación
  protocolVersion String   @default("1.0")  // Versión del protocolo Gailu Share
  capabilities    Json     @default("{}")   // Capacidades soportadas por el nodo

  // Estadísticas
  lastSyncAt      DateTime?
  totalUsers      Int      @default(0)
  trustScore      Float    @default(0.5)    // Puntuación de confianza (0-1)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  activities      FederatedActivity[]

  @@index([nodeId])
  @@index([status])
}

enum NodeType {
  GENESIS           // Nodo génesis (como Comunidad Viva)
  CURRENCY          // Banco/Moneda (Spiral Bank)
  MARKETPLACE       // Mercado (Mercado Espiral)
  GOVERNANCE        // Gobernanza (Democracia Universal)
  CARE              // Red de Cuidados
  EDUCATION         // Academia
  COMMUNITY         // Comunidades locales
  PROJECT           // Proyectos específicos
}

enum NodeStatus {
  ACTIVE            // Activo y sincronizado
  INACTIVE          // Inactivo temporalmente
  SUSPENDED         // Suspendido por razones de seguridad
  MAINTENANCE       // En mantenimiento
}

// Actividades federadas compartidas entre nodos (ActivityPub)
model FederatedActivity {
  id              String   @id @default(uuid())
  activityId      String   @unique  // ID global de la actividad (URI)
  type            ActivityType       // Tipo de actividad (Create, Announce, Like, etc.)

  // Origen
  publisherDID    String              // DID del usuario que publicó
  publisherId     String?             // ID local del usuario (si es de este nodo)
  publisher       User?    @relation("ActivityPublisher", fields: [publisherId], references: [id])
  nodeId          String              // ID del nodo origen
  node            FederatedNode @relation(fields: [nodeId], references: [id])

  // Contenido
  object          Json                // Objeto ActivityPub (Post, Offer, Event, etc.)
  content         String?             // Texto del contenido
  metadata        Json     @default("{}")

  // Visibilidad y alcance
  visibility      ActivityVisibility @default(PUBLIC)
  targetNodes     String[]            // Nodos a los que se envía (vacío = todos)

  // Estadísticas
  likes           Int      @default(0)
  shares          Int      @default(0)
  comments        Int      @default(0)

  publishedAt     DateTime @default(now())
  receivedAt      DateTime @default(now())

  @@index([publisherDID])
  @@index([nodeId])
  @@index([type])
  @@index([publishedAt])
}

enum ActivityType {
  CREATE            // Crear contenido (Post, Offer, Event)
  ANNOUNCE          // Compartir/Anunciar
  LIKE              // Me gusta
  FOLLOW            // Seguir
  ACCEPT            // Aceptar (seguimiento, propuesta)
  REJECT            // Rechazar
  UPDATE            // Actualizar
  DELETE            // Eliminar
  OFFER_SERVICE     // Ofrecer servicio/producto
  REQUEST_HELP      // Solicitar ayuda
  COMPLETE_EXCHANGE // Completar intercambio
}

enum ActivityVisibility {
  PUBLIC            // Visible para todos los nodos
  FEDERATED         // Visible para nodos federados específicos
  COMMUNITY         // Visible solo para la comunidad local
  PRIVATE           // Privado (solo destinatarios)
}

// Transacciones de tokens SEMILLA
model SemillaTransaction {
  id              String   @id @default(uuid())

  // Partes de la transacción
  fromDID         String              // DID del remitente
  fromId          String?             // ID local del remitente (si es de este nodo)
  from            User?    @relation("SemillaSender", fields: [fromId], references: [id])

  toDID           String              // DID del destinatario
  toId            String?             // ID local del destinatario (si es de este nodo)
  to              User?    @relation("SemillaReceiver", fields: [toId], references: [id])

  // Detalles de la transacción
  amount          Float               // Cantidad de SEMILLA transferida
  fee             Float    @default(0) // Tarifa del nodo (1%)
  type            SemillaTransactionType
  reason          String              // Motivo de la transferación
  metadata        Json     @default("{}") // Datos adicionales (ej: ID de oferta, evento)

  // Estado
  status          SemillaTransactionStatus @default(PENDING)
  errorMessage    String?

  // Trazabilidad blockchain (opcional)
  blockchainHash  String?  @unique   // Hash en blockchain si se registra
  blockNumber     Int?

  createdAt       DateTime @default(now())
  completedAt     DateTime?

  @@index([fromDID])
  @@index([toDID])
  @@index([fromId])
  @@index([toId])
  @@index([type])
  @@index([createdAt])
}

enum SemillaTransactionType {
  TRANSFER          // Transferencia directa
  REWARD            // Recompensa por Proof-of-Help
  PURCHASE          // Compra de producto/servicio
  DONATION          // Donación
  POOL_CONTRIBUTION // Contribución a fondo común
  POOL_DISTRIBUTION // Distribución desde fondo común
  FEE               // Tarifa de transacción
  INITIAL_GRANT     // Grant inicial de tokens
  BRIDGE_LOCK       // Lock para bridge a red externa
  BRIDGE_UNLOCK     // Unlock desde red externa
}

enum SemillaTransactionStatus {
  PENDING           // Pendiente de confirmación
  COMPLETED         // Completada
  FAILED            // Fallida
  CANCELLED         // Cancelada
}

// Bridge Transactions - Puentes entre Gailu Labs y otras blockchains
model BridgeTransaction {
  id              String   @id @default(uuid())

  // Usuario
  userId          String
  user            User     @relation("BridgeUser", fields: [userId], references: [id])
  userDID         String              // DID del usuario

  // Detalles de la transacción
  amount          Float               // Cantidad de SEMILLA
  fee             Float               // Tarifa del bridge
  direction       BridgeDirection     // LOCK o UNLOCK
  targetChain     BridgeChain         // Red de destino/origen

  // Direcciones externas
  externalAddress String              // Dirección en la red externa
  externalTxHash  String?             // Hash de la transacción externa

  // Transacción interna relacionada
  internalTxId    String?             // ID de SemillaTransaction

  // Estado
  status          BridgeStatus @default(PENDING)
  error           String?

  createdAt       DateTime @default(now())
  completedAt     DateTime?

  @@index([userId])
  @@index([userDID])
  @@index([targetChain])
  @@index([status])
  @@index([externalTxHash])
  @@index([createdAt])
}

enum BridgeDirection {
  LOCK              // Bloquear en interno, emitir en externo
  UNLOCK            // Quemar en externo, liberar en interno
}

enum BridgeChain {
  POLYGON           // Polygon (MATIC) - EVM
  SOLANA            // Solana - Alta velocidad
  ARBITRUM          // Arbitrum - Layer 2 de Ethereum
  OPTIMISM          // Optimism - Layer 2 de Ethereum
  BSC               // Binance Smart Chain
  AVALANCHE         // Avalanche C-Chain
}

enum BridgeStatus {
  PENDING           // Esperando confirmación
  LOCKED            // SEMILLA bloqueada en interno
  MINTED            // Wrapped SEMILLA emitida en externo
  BURNED            // Wrapped SEMILLA quemada en externo
  UNLOCKED          // SEMILLA liberada en interno
  FAILED            // Transacción fallida
}

// Círculos de Conciencia - Espacios de transformación personal y colectiva
model CirculoConciencia {
  id              String   @id @default(uuid())
  name            String              // Nombre del círculo
  description     String              // Descripción y propósito
  level           Int                 // Nivel de conciencia (1-7)
  type            CirculoType         // Tipo de círculo

  // Configuración
  maxParticipants Int?                // Máximo de participantes (null = ilimitado)
  isOpen          Boolean  @default(true) // Abierto a nuevos miembros
  requiresInvite  Boolean  @default(false) // Requiere invitación

  // Facilitación
  facilitatorDID  String              // DID del facilitador principal
  facilitatorIds  String[]            // IDs locales de facilitadores

  // Encuentros
  schedule        Json?               // Horario de encuentros (días, hora, frecuencia)
  location        String?             // Ubicación (física o virtual)
  language        String   @default("es")

  // Contenido
  practices       String[]            // Prácticas compartidas (meditación, diálogo, etc.)
  resources       Json     @default("[]") // Recursos compartidos (links, docs)

  // Estado
  status          CirculoStatus @default(ACTIVE)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  participations  CirculoParticipacion[]

  @@index([level])
  @@index([type])
  @@index([status])
}

enum CirculoType {
  PERSONAL          // Desarrollo personal
  RELACIONAL        // Relaciones conscientes
  CULTURAL          // Transformación cultural
  ECOLOGICO         // Conciencia ecológica
  ESPIRITUAL        // Prácticas espirituales
  ACTIVISMO         // Activismo consciente
  MIXTO             // Combinación de varios
}

enum CirculoStatus {
  FORMING           // En formación
  ACTIVE            // Activo
  PAUSED            // Pausado temporalmente
  COMPLETED         // Completado (ciclo finalizado)
  ARCHIVED          // Archivado
}

// Participación de usuarios en Círculos de Conciencia
model CirculoParticipacion {
  id              String   @id @default(uuid())

  userId          String
  user            User     @relation(fields: [userId], references: [id])

  circuloId       String
  circulo         CirculoConciencia @relation(fields: [circuloId], references: [id])

  // Estado de participación
  role            ParticipacionRole @default(MEMBER)
  status          ParticipacionStatus @default(ACTIVE)

  // Compromiso
  attendanceRate  Float    @default(0)     // Tasa de asistencia (0-1)
  contributionLevel Int    @default(0)     // Nivel de contribución

  // Crecimiento personal
  consciousnessGrowth Float @default(0)    // Crecimiento en conciencia
  reflections     Json     @default("[]")  // Reflexiones personales

  joinedAt        DateTime @default(now())
  lastAttendedAt  DateTime?
  leftAt          DateTime?

  @@unique([userId, circuloId])
  @@index([userId])
  @@index([circuloId])
  @@index([status])
}

enum ParticipacionRole {
  FACILITATOR       // Facilitador
  CO_FACILITATOR    // Co-facilitador
  MEMBER            // Miembro
  OBSERVER          // Observador
}

enum ParticipacionStatus {
  INVITED           // Invitado
  ACTIVE            // Activo
  INACTIVE          // Inactivo temporalmente
  LEFT              // Ha dejado el círculo
}
