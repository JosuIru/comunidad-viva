import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcrypt';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Iniciando seed de datos de prueba...');

  // Limpiar datos existentes usando TRUNCATE CASCADE (m√°s r√°pido y evita problemas de foreign keys)
  console.log('üóëÔ∏è  Limpiando datos existentes...');

  // Usar SQL raw para truncate en cascade (PostgreSQL)
  await prisma.$executeRawUnsafe('TRUNCATE TABLE "User", "Community" CASCADE');

  console.log('‚úì Base de datos limpiada');

  const hashedPassword = await bcrypt.hash('Test1234!', 10);

  // ==========================================
  // USUARIOS CON DIFERENTES NIVELES
  // ==========================================
  console.log('üë• Creando usuarios...');

  const users = await Promise.all([
    // Usuario 1: Alta reputaci√≥n - Validador Experto
    prisma.user.create({
      data: {
        email: 'maria@comunidad.local',
        password: hashedPassword,
        name: 'Mar√≠a Garc√≠a',
        bio: 'Activista comunitaria, organizadora de eventos locales. Me encanta ayudar a los vecinos.',
        avatar: 'https://i.pravatar.cc/150?img=1',
        role: 'CITIZEN',
        lat: 40.4168,
        lng: -3.7038,
        address: 'Calle Mayor 15, Madrid',
        neighborhood: 'Centro',
        credits: 250,
        level: 5,
        experience: 1500,
        peopleHelped: 120,
        hoursShared: 300,
        hoursReceived: 50,
        totalSaved: 850,
        co2Avoided: 125,
        voteCredits: 50,
        interests: ['jardiner√≠a', 'cocina', 'reparaci√≥n', 'eventos'],
        weeklyMood: 'AVAILABLE',
      },
    }),

    // Usuario 2: Reputaci√≥n media - Validador Activo
    prisma.user.create({
      data: {
        email: 'juan@comunidad.local',
        password: hashedPassword,
        name: 'Juan Mart√≠nez',
        bio: 'Carpintero y manitas. Ofrezco reparaciones y clases de bricolaje.',
        avatar: 'https://i.pravatar.cc/150?img=12',
        role: 'CITIZEN',
        lat: 40.4200,
        lng: -3.7050,
        address: 'Plaza Espa√±a 8, Madrid',
        neighborhood: 'Centro',
        credits: 180,
        level: 3,
        experience: 800,
        peopleHelped: 55,
        hoursShared: 120,
        hoursReceived: 30,
        totalSaved: 420,
        co2Avoided: 60,
        voteCredits: 30,
        interests: ['carpinter√≠a', 'bricolaje', 'reciclaje'],
        weeklyMood: 'AVAILABLE',
      },
    }),

    // Usuario 3: Nuevo usuario
    prisma.user.create({
      data: {
        email: 'ana@comunidad.local',
        password: hashedPassword,
        name: 'Ana L√≥pez',
        bio: 'Profesora de idiomas. Ofrezco clases de ingl√©s y franc√©s.',
        avatar: 'https://i.pravatar.cc/150?img=5',
        role: 'CITIZEN',
        lat: 40.4150,
        lng: -3.7000,
        address: 'Calle Alcal√° 42, Madrid',
        neighborhood: 'Centro',
        credits: 50,
        level: 1,
        experience: 100,
        peopleHelped: 8,
        hoursShared: 15,
        hoursReceived: 5,
        totalSaved: 75,
        co2Avoided: 10,
        voteCredits: 15,
        interests: ['idiomas', 'educaci√≥n', 'lectura'],
        weeklyMood: 'LEARNING',
      },
    }),

    // Usuario 4: Comercio local
    prisma.user.create({
      data: {
        email: 'tienda@comunidad.local',
        password: hashedPassword,
        name: 'Tienda Eco Local',
        bio: 'Comercio de productos ecol√≥gicos y locales. Apoyamos la econom√≠a circular.',
        avatar: 'https://i.pravatar.cc/150?img=20',
        role: 'MERCHANT',
        lat: 40.4180,
        lng: -3.7020,
        address: 'Calle Preciados 25, Madrid',
        neighborhood: 'Centro',
        credits: 100,
        level: 2,
        experience: 300,
        peopleHelped: 25,
        totalSaved: 200,
        voteCredits: 20,
        interests: ['sostenibilidad', 'productos-locales', 'ecolog√≠a'],
      },
    }),

    // Usuario 5: Organizador de eventos
    prisma.user.create({
      data: {
        email: 'carlos@comunidad.local',
        password: hashedPassword,
        name: 'Carlos Ruiz',
        bio: 'Organizador de eventos comunitarios y talleres.',
        avatar: 'https://i.pravatar.cc/150?img=8',
        role: 'CITIZEN',
        lat: 40.4190,
        lng: -3.7060,
        address: 'Gran V√≠a 30, Madrid',
        neighborhood: 'Centro',
        credits: 150,
        level: 4,
        experience: 1000,
        peopleHelped: 80,
        hoursShared: 200,
        hoursReceived: 40,
        totalSaved: 600,
        co2Avoided: 90,
        voteCredits: 40,
        interests: ['eventos', 'm√∫sica', 'arte', 'comunidad'],
        weeklyMood: 'ORGANIZING',
      },
    }),

    // Usuario 6: De Andia - Pastor y quesero
    prisma.user.create({
      data: {
        email: 'kepa@andia.eus',
        password: hashedPassword,
        name: 'Kepa Etxeberria',
        bio: 'Artzaina eta gaztagintzailea. Gazta ekologikoa eta bertakoa ekoizten dut.',
        avatar: 'https://i.pravatar.cc/150?img=14',
        role: 'MERCHANT',
        lat: 42.85,
        lng: -2.05,
        address: 'Lezaun, Navarra',
        neighborhood: 'Andia',
        credits: 120,
        level: 3,
        experience: 650,
        peopleHelped: 35,
        hoursShared: 80,
        totalSaved: 300,
        co2Avoided: 45,
        voteCredits: 25,
        interests: ['ganader√≠a', 'queso', 'productos-locales', 'sostenibilidad'],
        weeklyMood: 'AVAILABLE',
      },
    }),

    // Usuario 7: De Valdizarbe - Agricultor ecol√≥gico
    prisma.user.create({
      data: {
        email: 'javier@valdizarbe.com',
        password: hashedPassword,
        name: 'Javier Arana',
        bio: 'Agricultor ecol√≥gico. Verduras de temporada y cereales antiguos.',
        avatar: 'https://i.pravatar.cc/150?img=33',
        role: 'MERCHANT',
        lat: 42.55,
        lng: -1.75,
        address: 'Artajona, Navarra',
        neighborhood: 'Valdizarbe',
        credits: 180,
        level: 4,
        experience: 950,
        peopleHelped: 65,
        hoursShared: 150,
        totalSaved: 520,
        co2Avoided: 85,
        voteCredits: 35,
        interests: ['agricultura', 'ecol√≥gico', 'cereales', 'huerto'],
        weeklyMood: 'AVAILABLE',
      },
    }),

    // Usuario 8: De Am√©scoa - Herrera artesano
    prisma.user.create({
      data: {
        email: 'mikel@ameskoa.eus',
        password: hashedPassword,
        name: 'Mikel Zubiria',
        bio: 'Burdingintzailea. Tresna eta objektu artisauak egiten ditut burdinarekin.',
        avatar: 'https://i.pravatar.cc/150?img=51',
        role: 'CITIZEN',
        lat: 42.75,
        lng: -2.25,
        address: 'Zudaire, Navarra',
        neighborhood: 'Am√©scoa',
        credits: 90,
        level: 2,
        experience: 450,
        peopleHelped: 28,
        hoursShared: 70,
        totalSaved: 250,
        co2Avoided: 35,
        voteCredits: 20,
        interests: ['herrer√≠a', 'artesan√≠a', 'metal', 'reparaci√≥n'],
        weeklyMood: 'AVAILABLE',
      },
    }),

    // Usuario 9: De Am√©scoa - Productora de miel
    prisma.user.create({
      data: {
        email: 'aitziber@ameskoa.eus',
        password: hashedPassword,
        name: 'Aitziber Landa',
        bio: 'Erlezaina. Eztia eta ezti-produktuak saltzen ditut.',
        avatar: 'https://i.pravatar.cc/150?img=44',
        role: 'MERCHANT',
        lat: 42.76,
        lng: -2.24,
        address: 'San Mart√≠n de Am√©scoa, Navarra',
        neighborhood: 'Am√©scoa',
        credits: 110,
        level: 3,
        experience: 580,
        peopleHelped: 42,
        hoursShared: 95,
        totalSaved: 380,
        co2Avoided: 50,
        voteCredits: 28,
        interests: ['apicultura', 'miel', 'productos-naturales', 'ecolog√≠a'],
        weeklyMood: 'AVAILABLE',
      },
    }),
  ]);

  console.log(`‚úì Creados ${users.length} usuarios`);

  // ==========================================
  // SKILLS
  // ==========================================
  console.log('üéì Creando habilidades...');

  await Promise.all([
    prisma.skill.create({
      data: {
        userId: users[0].id,
        category: 'Hogar',
        name: 'Jardiner√≠a',
        description: 'Cuidado de plantas, huertos urbanos',
        verified: true,
        endorsements: 15,
      },
    }),
    prisma.skill.create({
      data: {
        userId: users[0].id,
        category: 'Cocina',
        name: 'Cocina vegetariana',
        description: 'Recetas saludables y sostenibles',
        verified: true,
        endorsements: 20,
      },
    }),
    prisma.skill.create({
      data: {
        userId: users[1].id,
        category: 'Reparaci√≥n',
        name: 'Carpinter√≠a',
        description: 'Reparaci√≥n de muebles, bricolaje',
        verified: true,
        endorsements: 30,
      },
    }),
    prisma.skill.create({
      data: {
        userId: users[2].id,
        category: 'Educaci√≥n',
        name: 'Ingl√©s',
        description: 'Clases de ingl√©s todos los niveles',
        verified: false,
        endorsements: 5,
      },
    }),
  ]);

  console.log('‚úì Creadas habilidades');

  // ==========================================
  // BADGES
  // ==========================================
  console.log('üèÜ Asignando badges...');

  await Promise.all([
    prisma.userBadge.create({
      data: {
        userId: users[0].id,
        badgeType: 'HELPER_100',
        metadata: { earnedAt: new Date('2024-06-01') },
      },
    }),
    prisma.userBadge.create({
      data: {
        userId: users[0].id,
        badgeType: 'ORGANIZER',
        metadata: { eventsOrganized: 15 },
      },
    }),
    prisma.userBadge.create({
      data: {
        userId: users[1].id,
        badgeType: 'HELPER_50',
        metadata: { earnedAt: new Date('2024-08-15') },
      },
    }),
    prisma.userBadge.create({
      data: {
        userId: users[4].id,
        badgeType: 'ORGANIZER',
        metadata: { eventsOrganized: 20 },
      },
    }),
  ]);

  console.log('‚úì Asignados badges');

  // ==========================================
  // CONEXIONES
  // ==========================================
  console.log('ü§ù Creando conexiones...');

  await Promise.all([
    prisma.connection.create({
      data: {
        userId: users[0].id,
        connectedId: users[1].id,
        type: 'NEIGHBOR',
      },
    }),
    prisma.connection.create({
      data: {
        userId: users[0].id,
        connectedId: users[2].id,
        type: 'HELPER',
      },
    }),
    prisma.connection.create({
      data: {
        userId: users[1].id,
        connectedId: users[2].id,
        type: 'NEIGHBOR',
      },
    }),
    prisma.connection.create({
      data: {
        userId: users[0].id,
        connectedId: users[4].id,
        type: 'FRIEND',
      },
    }),
  ]);

  console.log('‚úì Creadas conexiones');

  // ==========================================
  // OFERTAS
  // ==========================================
  console.log('üõçÔ∏è  Creando ofertas...');

  const offers = await Promise.all([
    // Producto
    prisma.offer.create({
      data: {
        userId: users[3].id,
        type: 'PRODUCT',
        category: 'Alimentos',
        title: 'Verduras ecol√≥gicas de temporada',
        description: 'Verduras frescas cultivadas sin pesticidas. Disponibles: tomates, lechugas, calabacines.',
        images: ['https://images.unsplash.com/photo-1540420773420-3366772f4999'],
        priceEur: 3.50,
        priceCredits: 35,
        stock: 20,
        lat: users[3].lat,
        lng: users[3].lng,
        address: users[3].address,
        tags: ['ecol√≥gico', 'local', 'temporada'],
        status: 'ACTIVE',
        featured: true,
        views: 45,
        interested: 12,
      },
    }),

    // Servicio
    prisma.offer.create({
      data: {
        userId: users[1].id,
        type: 'SERVICE',
        category: 'Reparaci√≥n',
        title: 'Reparaci√≥n de muebles',
        description: 'Arreglo todo tipo de muebles de madera. Restauraci√≥n y barnizado.',
        images: ['https://images.unsplash.com/photo-1556909114-f6e7ad7d3136'],
        priceEur: 25,
        priceCredits: 250,
        lat: users[1].lat,
        lng: users[1].lng,
        address: users[1].address,
        tags: ['reparaci√≥n', 'carpinter√≠a', 'reciclaje'],
        status: 'ACTIVE',
        views: 30,
        interested: 8,
      },
    }),

    // Ofertas de Navarra - Queso de Andia
    prisma.offer.create({
      data: {
        userId: users[5].id, // Kepa Etxeberria
        type: 'PRODUCT',
        category: 'Alimentos',
        title: 'Gazta ekologikoa / Queso artesano de oveja',
        description: 'Andiako ardiekin egindako gazta artisaua. 100% naturala eta ekologikoa. / Queso artesano elaborado con leche de ovejas de la Sierra de And√≠a.',
        images: ['https://images.unsplash.com/photo-1452195100486-9cc805987862'],
        priceEur: 12,
        priceCredits: 120,
        stock: 15,
        lat: users[5].lat,
        lng: users[5].lng,
        address: users[5].address,
        tags: ['queso', 'artesano', 'ecol√≥gico', 'local', 'navarra'],
        status: 'ACTIVE',
        featured: true,
        views: 28,
        interested: 9,
      },
    }),

    // Verduras de Valdizarbe
    prisma.offer.create({
      data: {
        userId: users[6].id, // Javier Arana
        type: 'PRODUCT',
        category: 'Alimentos',
        title: 'Verduras ecol√≥gicas y cereales antiguos',
        description: 'Verduras de temporada cultivadas sin qu√≠micos. Trigo sarraceno, espelta y otras variedades tradicionales de Navarra.',
        images: ['https://images.unsplash.com/photo-1518843875459-f738682238a6'],
        priceEur: 4,
        priceCredits: 40,
        stock: 30,
        lat: users[6].lat,
        lng: users[6].lng,
        address: users[6].address,
        tags: ['verduras', 'ecol√≥gico', 'cereales', 'km0', 'navarra'],
        status: 'ACTIVE',
        featured: true,
        views: 35,
        interested: 14,
      },
    }),

    // Miel de Am√©scoa
    prisma.offer.create({
      data: {
        userId: users[8].id, // Aitziber Landa
        type: 'PRODUCT',
        category: 'Alimentos',
        title: 'Eztia / Miel de monta√±a de Am√©scoa',
        description: 'Ameskoako mendietako eztia. Ekoizpen artisaua eta ekologikoa. / Miel de flores de monta√±a del valle de Am√©scoa.',
        images: ['https://images.unsplash.com/photo-1587049352846-4a222e784443'],
        priceEur: 8,
        priceCredits: 80,
        stock: 25,
        lat: users[8].lat,
        lng: users[8].lng,
        address: users[8].address,
        tags: ['miel', 'ecol√≥gico', 'artesano', 'monta√±a', 'navarra'],
        status: 'ACTIVE',
        featured: true,
        views: 32,
        interested: 11,
      },
    }),

    // Herrer√≠a artesana de Am√©scoa
    prisma.offer.create({
      data: {
        userId: users[7].id, // Mikel Zubiria
        type: 'SERVICE',
        category: 'Artesan√≠a',
        title: 'Burdin-lanak / Trabajos de herrer√≠a artesanal',
        description: 'Tresnak, dekorazioa eta konponketak burdinarekin. / Herramientas, decoraci√≥n y reparaciones en hierro forjado.',
        images: ['https://images.unsplash.com/photo-1530105186532-c4e119c1b5f5'],
        priceEur: 35,
        priceCredits: 350,
        lat: users[7].lat,
        lng: users[7].lng,
        address: users[7].address,
        tags: ['herrer√≠a', 'artesan√≠a', 'hierro', 'forja', 'navarra'],
        status: 'ACTIVE',
        views: 18,
        interested: 6,
      },
    }),
  ]);

  console.log(`‚úì Creadas ${offers.length} ofertas`);

  // ==========================================
  // BANCO DE TIEMPO
  // ==========================================
  console.log('‚è∞ Creando ofertas de banco de tiempo...');

  const timeBankOffers = await Promise.all([
    prisma.offer.create({
      data: {
        userId: users[0].id,
        type: 'TIME_BANK',
        category: 'Hogar',
        title: 'Ayuda con jardiner√≠a',
        description: 'Puedo ayudarte con tu jard√≠n o huerto urbano',
        images: ['https://images.unsplash.com/photo-1416879595882-3373a0480b5b'],
        lat: users[0].lat,
        lng: users[0].lng,
        tags: ['jardiner√≠a', 'plantas', 'huerto'],
        status: 'ACTIVE',
        timeBank: {
          create: {
            estimatedHours: 2,
            canTeach: true,
            maxStudents: 3,
            experienceLevel: 'INTERMEDIATE',
            toolsNeeded: ['guantes', 'pala'],
          },
        },
      },
      include: {
        timeBank: true,
      },
    }),
    prisma.offer.create({
      data: {
        userId: users[2].id,
        type: 'TIME_BANK',
        category: 'Educaci√≥n',
        title: 'Clases de ingl√©s',
        description: 'Clases particulares de ingl√©s para todos los niveles',
        images: ['https://images.unsplash.com/photo-1503676260728-1c00da094a0b'],
        lat: users[2].lat,
        lng: users[2].lng,
        tags: ['idiomas', 'educaci√≥n', 'ingl√©s'],
        status: 'ACTIVE',
        timeBank: {
          create: {
            estimatedHours: 1,
            canTeach: true,
            maxStudents: 5,
            experienceLevel: 'EXPERT',
            toolsNeeded: [],
          },
        },
      },
      include: {
        timeBank: true,
      },
    }),
  ]);

  console.log(`‚úì Creadas ${timeBankOffers.length} ofertas de banco de tiempo`);

  // ==========================================
  // TRANSACCIONES BANCO DE TIEMPO
  // ==========================================
  console.log('üí± Creando transacciones de banco de tiempo...');

  const timeBankTransactions = await Promise.all([
    prisma.timeBankTransaction.create({
      data: {
        offerId: timeBankOffers[0].timeBank!.id,
        providerId: users[0].id,
        requesterId: users[1].id,
        hours: 2,
        credits: 20,
        scheduledFor: new Date('2024-10-01'),
        status: 'COMPLETED',
        description: 'Ayuda con el huerto urbano',
        completedAt: new Date('2024-10-01T18:00:00Z'),
      },
    }),
    prisma.timeBankTransaction.create({
      data: {
        offerId: timeBankOffers[1].timeBank!.id,
        providerId: users[2].id,
        requesterId: users[1].id,
        hours: 1,
        credits: 10,
        scheduledFor: new Date('2024-10-03'),
        status: 'COMPLETED',
        description: 'Clase de ingl√©s b√°sico',
        completedAt: new Date('2024-10-03T17:00:00Z'),
      },
    }),
    prisma.timeBankTransaction.create({
      data: {
        offerId: timeBankOffers[0].timeBank!.id,
        providerId: users[0].id,
        requesterId: users[2].id,
        hours: 3,
        credits: 30,
        scheduledFor: new Date('2024-10-05'),
        status: 'PENDING',
        description: 'Crear huerto en balc√≥n',
      },
    }),
  ]);

  console.log(`‚úì Creadas ${timeBankTransactions.length} transacciones`);

  // ==========================================
  // EVENTOS
  // ==========================================
  console.log('üìÖ Creando eventos...');

  const eventOffers = await Promise.all([
    prisma.offer.create({
      data: {
        userId: users[4].id,
        type: 'EVENT',
        category: 'Comunidad',
        title: 'Mercadillo de trueque mensual',
        description: 'Trae lo que ya no uses y ll√©vate lo que necesites. ¬°Sin dinero!',
        images: ['https://images.unsplash.com/photo-1556742049-0cfed4f6a45d'],
        lat: 40.4170,
        lng: -3.7030,
        address: 'Plaza del Carmen, Madrid',
        tags: ['trueque', 'reciclaje', 'comunidad'],
        status: 'ACTIVE',
        views: 80,
        interested: 25,
      },
    }),
    prisma.offer.create({
      data: {
        userId: users[0].id,
        type: 'EVENT',
        category: 'Sostenibilidad',
        title: 'Taller de compostaje urbano',
        description: 'Aprende a hacer compost en casa y reducir tus residuos',
        images: ['https://images.unsplash.com/photo-1542601906990-b4d3fb778b09'],
        lat: 40.4160,
        lng: -3.7010,
        address: 'Centro Comunitario Lavapi√©s',
        tags: ['sostenibilidad', 'compostaje', 'taller'],
        status: 'ACTIVE',
        views: 60,
        interested: 15,
      },
    }),
  ]);

  const events = await Promise.all([
    prisma.event.create({
      data: {
        offerId: eventOffers[0].id,
        organizerId: users[4].id,
        title: 'Mercadillo de trueque mensual',
        description: 'Trae lo que ya no uses y ll√©vate lo que necesites. ¬°Sin dinero!',
        lat: 40.4170,
        lng: -3.7030,
        address: 'Plaza del Carmen, Madrid',
        startsAt: new Date('2024-11-15T10:00:00Z'),
        endsAt: new Date('2024-11-15T14:00:00Z'),
        capacity: 50,
        type: 'MARKET',
        tags: ['trueque', 'reciclaje', 'comunidad'],
        requirements: [],
      },
    }),
    prisma.event.create({
      data: {
        offerId: eventOffers[1].id,
        organizerId: users[0].id,
        title: 'Taller de compostaje urbano',
        description: 'Aprende a hacer compost en casa y reducir tus residuos',
        lat: 40.4160,
        lng: -3.7010,
        address: 'Centro Comunitario Lavapi√©s',
        startsAt: new Date('2024-11-20T17:00:00Z'),
        endsAt: new Date('2024-11-20T19:00:00Z'),
        capacity: 20,
        type: 'WORKSHOP',
        tags: ['sostenibilidad', 'compostaje', 'taller'],
        requirements: [],
      },
    }),
  ]);

  console.log(`‚úì Creados ${events.length} eventos`);

  // Registrar asistentes
  await Promise.all([
    prisma.eventAttendee.create({
      data: {
        eventId: events[0].id,
        userId: users[0].id,
        role: 'PARTICIPANT',
      },
    }),
    prisma.eventAttendee.create({
      data: {
        eventId: events[0].id,
        userId: users[1].id,
        role: 'PARTICIPANT',
      },
    }),
    prisma.eventAttendee.create({
      data: {
        eventId: events[1].id,
        userId: users[1].id,
        role: 'VOLUNTEER',
      },
    }),
  ]);

  // ==========================================
  // POSTS Y RED SOCIAL
  // ==========================================
  console.log('üì± Creando posts...');

  const posts = await Promise.all([
    prisma.post.create({
      data: {
        authorId: users[0].id,
        content: '¬°Incre√≠ble jornada de intercambio de semillas hoy! üå± Gracias a todos los que vinieron. #ComunidadVerde',
        type: 'STORY',
        visibility: 'PUBLIC',
        images: [],
        tags: [],
        mentions: [],
        thanksCount: 15,
        commentsCount: 3,
      },
    }),
    prisma.post.create({
      data: {
        authorId: users[4].id,
        content: 'üì¢ Pr√≥ximo evento: Mercadillo de trueque el 15 de noviembre. ¬°Ap√∫ntate!',
        type: 'OFFER',
        visibility: 'PUBLIC',
        images: [],
        tags: [],
        mentions: [],
        supportsCount: 22,
        commentsCount: 5,
        relatedOfferId: eventOffers[0].id,
      },
    }),
    prisma.post.create({
      data: {
        authorId: users[1].id,
        content: 'Termin√© de restaurar esta silla antigua. ¬°Qued√≥ como nueva! ‚ôªÔ∏è',
        type: 'ACHIEVEMENT',
        images: ['https://images.unsplash.com/photo-1503602642458-232111445657'],
        visibility: 'PUBLIC',
        tags: [],
        mentions: [],
        thanksCount: 30,
        commentsCount: 8,
      },
    }),
  ]);

  console.log(`‚úì Creados ${posts.length} posts`);

  // Comentarios
  await Promise.all([
    prisma.comment.create({
      data: {
        postId: posts[0].id,
        authorId: users[1].id,
        content: '¬°Qu√© bonito! Me hubiera gustado ir',
      },
    }),
    prisma.comment.create({
      data: {
        postId: posts[1].id,
        authorId: users[0].id,
        content: '¬°Ya me apunt√©! ¬øQu√© puedo llevar?',
      },
    }),
    prisma.comment.create({
      data: {
        postId: posts[2].id,
        authorId: users[2].id,
        content: '¬°Qu√© talento! ¬øHaces restauraciones por encargo?',
      },
    }),
  ]);

  // Reacciones
  await Promise.all([
    prisma.reaction.create({
      data: {
        postId: posts[0].id,
        userId: users[1].id,
        type: 'CELEBRATE',
      },
    }),
    prisma.reaction.create({
      data: {
        postId: posts[1].id,
        userId: users[0].id,
        type: 'SUPPORT',
      },
    }),
  ]);

  // ==========================================
  // TRANSACCIONES DE CR√âDITOS
  // ==========================================
  console.log('üí∞ Creando transacciones de cr√©ditos...');

  await Promise.all([
    prisma.creditTransaction.create({
      data: {
        userId: users[0].id,
        amount: 50,
        balance: 250,
        reason: 'COMMUNITY_HELP',
        description: 'Ayuda con jardiner√≠a - Juan',
        relatedId: timeBankTransactions[0].id,
      },
    }),
    prisma.creditTransaction.create({
      data: {
        userId: users[1].id,
        amount: -50,
        balance: 180,
        reason: 'TIME_BANK_HOUR',
        description: 'Recibida ayuda con jardiner√≠a',
        relatedId: timeBankTransactions[0].id,
      },
    }),
    prisma.creditTransaction.create({
      data: {
        userId: users[0].id,
        amount: 10,
        balance: 260,
        reason: 'ADMIN_GRANT',
        description: 'Recompensa por validar transacci√≥n',
      },
    }),
  ]);

  console.log('‚úì Creadas transacciones de cr√©ditos');

  // ==========================================
  // SISTEMA DE CONSENSO
  // ==========================================
  console.log('‚õìÔ∏è  Creando datos de consenso...');

  // Trust Blocks
  const blocks = await Promise.all([
    prisma.trustBlock.create({
      data: {
        height: 1,
        hash: '0x0000abc123def456',
        previousHash: '0',
        type: 'HELP',
        actorId: users[0].id,
        content: {
          type: 'timebank',
          transactionId: timeBankTransactions[0].id,
          hours: 2,
          description: 'Ayuda con jardiner√≠a',
        },
        nonce: 12345,
        difficulty: 2,
        timestamp: new Date('2024-10-01T12:00:00Z'),
        status: 'APPROVED',
      },
    }),
    prisma.trustBlock.create({
      data: {
        height: 2,
        hash: '0x0000def789ghi012',
        previousHash: '0x0000abc123def456',
        type: 'HELP',
        actorId: users[2].id,
        content: {
          type: 'timebank',
          transactionId: timeBankTransactions[1].id,
          hours: 1,
          description: 'Clase de ingl√©s',
        },
        nonce: 23456,
        difficulty: 2,
        timestamp: new Date('2024-10-03T12:00:00Z'),
        status: 'APPROVED',
      },
    }),
  ]);

  console.log(`‚úì Creados ${blocks.length} trust blocks`);

  // Block Validations
  await Promise.all([
    prisma.blockValidation.create({
      data: {
        blockId: blocks[0].id,
        validatorId: users[1].id,
        decision: 'APPROVE',
        reason: 'Vi a Mar√≠a ayudando en el huerto comunitario',
        stake: 55,
      },
    }),
    prisma.blockValidation.create({
      data: {
        blockId: blocks[0].id,
        validatorId: users[2].id,
        decision: 'APPROVE',
        stake: 8,
      },
    }),
    prisma.blockValidation.create({
      data: {
        blockId: blocks[1].id,
        validatorId: users[0].id,
        decision: 'APPROVE',
        reason: 'Confirmado, Ana dio clase a Juan',
        stake: 120,
      },
    }),
  ]);

  console.log('‚úì Creadas validaciones de bloques');

  // Propuestas
  const proposals = await Promise.all([
    prisma.proposal.create({
      data: {
        blockId: blocks[0].id,
        authorId: users[0].id,
        type: 'FEATURE',
        title: 'Crear Repair Caf√© mensual',
        description: `Propongo crear un evento mensual tipo "Repair Caf√©" donde los vecinos puedan traer objetos rotos para repararlos juntos.

Beneficios:
- Reducci√≥n de residuos
- Aprendizaje de habilidades
- Fortalecimiento comunitario
- Econom√≠a circular

El primer s√°bado de cada mes en el centro comunitario.`,
        requiredBudget: 50,
        implementationPlan: 'Reservar espacio, comprar herramientas b√°sicas, promoci√≥n en redes',
        status: 'VOTING',
        discussionDeadline: new Date('2024-11-10T23:59:59Z'),
        votingDeadline: new Date('2024-11-15T23:59:59Z'),
      },
    }),
  ]);

  console.log(`‚úì Creadas ${proposals.length} propuestas`);

  // Votos en propuestas
  await Promise.all([
    prisma.proposalVote.create({
      data: {
        proposalId: proposals[0].id,
        voterId: users[0].id,
        points: 5,
        cost: 25,
      },
    }),
    prisma.proposalVote.create({
      data: {
        proposalId: proposals[0].id,
        voterId: users[1].id,
        points: 3,
        cost: 9,
      },
    }),
    prisma.proposalVote.create({
      data: {
        proposalId: proposals[0].id,
        voterId: users[4].id,
        points: 4,
        cost: 16,
      },
    }),
  ]);

  console.log('‚úì Creados votos en propuestas');

  // Comentarios en propuestas
  await Promise.all([
    prisma.proposalComment.create({
      data: {
        proposalId: proposals[0].id,
        authorId: users[1].id,
        content: '¬°Excelente idea! Como carpintero, estar√≠a encantado de ayudar con las reparaciones de muebles.',
      },
    }),
    prisma.proposalComment.create({
      data: {
        proposalId: proposals[0].id,
        authorId: users[4].id,
        content: 'Me parece perfecto. Podemos coordinarlo con otros eventos comunitarios.',
      },
    }),
  ]);

  console.log('‚úì Creados comentarios en propuestas');

  // ==========================================
  // GAMIFICACI√ìN: FLASH DEALS (COMMENTED OUT - Needs Merchant model)
  // ==========================================
  // console.log('‚ö° Creando Flash Deals...');
  //
  // const flashDeals = await Promise.all([
  //   prisma.flashDeal.create({
  //     data: {
  //       merchantId: users[3].id,
  //       title: 'Descuento 50% en verduras ecol√≥gicas',
  //       product: 'Verduras de temporada',
  //       originalPrice: 700,
  //       discount: 50,
  //       maxRedemptions: 10,
  //       currentRedemptions: 3,
  //       expiresAt: new Date(Date.now() + 3 * 60 * 60 * 1000), // 3 horas desde ahora
  //     },
  //   }),
  //   prisma.flashDeal.create({
  //     data: {
  //       merchantId: users[1].id,
  //       title: 'Reparaci√≥n express con 40% descuento',
  //       product: 'Reparaci√≥n de muebles peque√±os',
  //       originalPrice: 2500,
  //       discount: 40,
  //       maxRedemptions: 5,
  //       currentRedemptions: 2,
  //       expiresAt: new Date(Date.now() + 2 * 60 * 60 * 1000), // 2 horas
  //     },
  //   }),
  // ]);
  //
  // console.log(`‚úì Creados ${flashDeals.length} flash deals`);

  // ==========================================
  // GAMIFICACI√ìN: CHALLENGES (COMMENTED OUT - Models don't exist)
  // ==========================================
  // console.log('üèÜ Creando Challenges...');
  //
  // const challenges = await Promise.all([
  //   prisma.challenge.create({
  //     data: {
  //       title: 'Maestro de la Ayuda',
  //       description: 'Ayuda a 5 vecinos esta semana',
  //       type: 'WEEKLY',
  //       goal: 5,
  //       reward: 50,
  //       startsAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // Hace 2 d√≠as
  //       endsAt: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000), // En 5 d√≠as
  //       active: true,
  //     },
  //   }),
  //   prisma.challenge.create({
  //     data: {
  //       title: 'Creador de Contenido',
  //       description: 'Publica 3 ofertas esta semana',
  //       type: 'WEEKLY',
  //       goal: 3,
  //       reward: 30,
  //       startsAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),
  //       endsAt: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),
  //       active: true,
  //     },
  //   }),
  //   prisma.challenge.create({
  //     data: {
  //       title: 'Organizador Social',
  //       description: 'Asiste a 2 eventos comunitarios',
  //       type: 'WEEKLY',
  //       goal: 2,
  //       reward: 40,
  //       startsAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),
  //       endsAt: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),
  //       active: true,
  //     },
  //   }),
  // ]);
  //
  // console.log(`‚úì Creados ${challenges.length} challenges`);
  //
  // // Participaciones en challenges
  // await Promise.all([
  //   prisma.challengeParticipation.create({
  //     data: {
  //       challengeId: challenges[0].id,
  //       userId: users[0].id,
  //       progress: 4,
  //       completed: false,
  //     },
  //   }),
  //   prisma.challengeParticipation.create({
  //     data: {
  //       challengeId: challenges[0].id,
  //       userId: users[1].id,
  //       progress: 2,
  //       completed: false,
  //     },
  //   }),
  //   prisma.challengeParticipation.create({
  //     data: {
  //       challengeId: challenges[1].id,
  //       userId: users[2].id,
  //       progress: 3,
  //       completed: true,
  //       completedAt: new Date(),
  //     },
  //   }),
  // ]);

  // ==========================================
  // GAMIFICACI√ìN: SWIPE CARDS (COMMENTED OUT - Models don't exist)
  // ==========================================
  // console.log('üíù Creando Swipe Cards...');
  //
  // const swipeCards = await Promise.all([
  //   prisma.swipeCard.create({
  //     data: {
  //       userId: users[2].id,
  //       userName: users[2].name,
  //       bio: users[2].bio!,
  //       avatar: users[2].avatar,
  //       interests: users[2].interests,
  //       helpOffered: ['Clases de ingl√©s', 'Traducci√≥n'],
  //       helpNeeded: ['Reparaciones', 'Jardiner√≠a'],
  //       mutualConnections: 2,
  //     },
  //   }),
  //   prisma.swipeCard.create({
  //     data: {
  //       userId: users[4].id,
  //       userName: users[4].name,
  //       bio: users[4].bio!,
  //       avatar: users[4].avatar,
  //       interests: users[4].interests,
  //       helpOffered: ['Organizaci√≥n de eventos', 'DJ'],
  //       helpNeeded: ['Dise√±o gr√°fico', 'Fotograf√≠a'],
  //       mutualConnections: 1,
  //     },
  //   }),
  // ]);
  //
  // console.log(`‚úì Creados ${swipeCards.length} swipe cards`);
  //
  // // Swipe actions
  // await Promise.all([
  //   prisma.swipeAction.create({
  //     data: {
  //       cardId: swipeCards[0].id,
  //       userId: users[0].id,
  //       action: 'LIKE',
  //     },
  //   }),
  //   prisma.swipeAction.create({
  //     data: {
  //       cardId: swipeCards[1].id,
  //       userId: users[0].id,
  //       action: 'SUPER_LIKE',
  //     },
  //   }),
  // ]);

  // ==========================================
  // GAMIFICACI√ìN: GROUP BUYS (COMMENTED OUT - Needs proper Offer setup)
  // ==========================================
  // console.log('üõí Creando Group Buys...');
  //
  // // First create offers for group buys
  // const groupBuyOffers = await Promise.all([
  //   prisma.offer.create({
  //     data: {
  //       userId: users[3].id,
  //       type: 'PRODUCT',
  //       category: 'Alimentos',
  //       title: 'Compra grupal de productos eco',
  //       description: 'Compra colectiva de productos ecol√≥gicos con descuento progresivo',
  //       priceEur: 20.00,
  //       lat: users[3].lat,
  //       lng: users[3].lng,
  //       address: users[3].address,
  //       status: 'ACTIVE',
  //     },
  //   }),
  //   prisma.offer.create({
  //     data: {
  //       userId: users[1].id,
  //       type: 'SERVICE',
  //       category: 'Educaci√≥n',
  //       title: 'Taller grupal de carpinter√≠a',
  //       description: 'Aprende carpinter√≠a en grupo. M√°s personas = menos precio por persona',
  //       priceEur: 50.00,
  //       lat: users[1].lat,
  //       lng: users[1].lng,
  //       address: users[1].address,
  //       status: 'ACTIVE',
  //     },
  //   }),
  // ]);
  //
  // const groupBuys = await Promise.all([
  //   prisma.groupBuy.create({
  //     data: {
  //       offerId: groupBuyOffers[0].id,
  //       minParticipants: 5,
  //       maxParticipants: 20,
  //       currentParticipants: 8,
  //       deadline: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 d√≠as
  //       pickupLat: users[3].lat,
  //       pickupLng: users[3].lng,
  //       pickupAddress: users[3].address,
  //       status: 'ACTIVE',
  //     },
  //   }),
  //   prisma.groupBuy.create({
  //     data: {
  //       offerId: groupBuyOffers[1].id,
  //       minParticipants: 3,
  //       maxParticipants: 10,
  //       currentParticipants: 6,
  //       deadline: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000), // 10 d√≠as
  //       pickupLat: users[1].lat,
  //       pickupLng: users[1].lng,
  //       pickupAddress: users[1].address,
  //       status: 'ACTIVE',
  //     },
  //   }),
  // ]);
  //
  // console.log(`‚úì Creados ${groupBuys.length} group buys`);
  //
  // // Participantes
  // await Promise.all([
  //   prisma.groupBuyParticipant.create({
  //     data: {
  //       groupBuyId: groupBuys[0].id,
  //       userId: users[0].id,
  //       quantity: 1,
  //     },
  //   }),
  //   prisma.groupBuyParticipant.create({
  //     data: {
  //       groupBuyId: groupBuys[0].id,
  //       userId: users[1].id,
  //       quantity: 2,
  //     },
  //   }),
  //   prisma.groupBuyParticipant.create({
  //     data: {
  //       groupBuyId: groupBuys[1].id,
  //       userId: users[2].id,
  //       quantity: 1,
  //     },
  //   }),
  // ]);

  // ==========================================
  // GAMIFICACI√ìN: REFERRALS (COMMENTED OUT - Needs ReferralCode model)
  // ==========================================
  // console.log('üåü Creando Referrals...');
  //
  // // First create referral codes
  // const referralCode = await prisma.referralCode.create({
  //   data: {
  //     userId: users[0].id,
  //     code: 'MARIA2024',
  //     rewardForReferrer: 20,
  //     rewardForReferred: 20,
  //     bonusOnFirstTransaction: 10,
  //   },
  // });
  //
  // await Promise.all([
  //   prisma.referral.create({
  //     data: {
  //       codeId: referralCode.id,
  //       referredUserId: users[2].id,
  //       rewardGranted: true,
  //     },
  //   }),
  //   prisma.referral.create({
  //     data: {
  //       codeId: referralCode.id,
  //       referredUserId: users[4].id,
  //       rewardGranted: true,
  //     },
  //   }),
  // ]);
  //
  // console.log('‚úì Creados referrals');

  // ==========================================
  // HYBRID LAYER: CELEBRATIONS (COMMENTED OUT - Models don't exist)
  // ==========================================
  // console.log('üéâ Creando Celebrations...');
  //
  // const celebrations = await Promise.all([
  //   prisma.layerCelebration.create({
  //     data: {
  //       userId: users[2].id,
  //       userName: users[2].name,
  //       fromLayer: 'TRADITIONAL',
  //       toLayer: 'TRANSITIONAL',
  //       reason: 'Quiero experimentar con la econom√≠a del don',
  //     },
  //   }),
  // ]);
  //
  // console.log(`‚úì Creados ${celebrations.length} celebrations`);
  //
  // // Congratulations
  // await Promise.all([
  //   prisma.celebrationCongratulation.create({
  //     data: {
  //       celebrationId: celebrations[0].id,
  //       userId: users[0].id,
  //     },
  //   }),
  //   prisma.celebrationCongratulation.create({
  //     data: {
  //       celebrationId: celebrations[0].id,
  //       userId: users[1].id,
  //     },
  //   }),
  // ]);

  // ==========================================
  // HYBRID LAYER: BRIDGE EVENTS
  // ==========================================
  console.log('üåâ Creando Bridge Events...');

  const bridgeEvents = await Promise.all([
    prisma.bridgeEvent.create({
      data: {
        type: 'LAYER_EXPERIMENT',
        title: 'Semana sin dinero',
        description: 'Experimenta una semana usando solo econom√≠a del don',
        startsAt: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000), // En 15 d√≠as
        endsAt: new Date(Date.now() + 22 * 24 * 60 * 60 * 1000), // 7 d√≠as despu√©s
        forceLayer: 'GIFT_PURE',
        participantsCount: 12,
      },
    }),
    prisma.bridgeEvent.create({
      data: {
        type: 'GIFT_DAY',
        title: 'D√≠a de la abundancia comunitaria',
        description: 'Un d√≠a donde compartimos recursos libremente sin expectativas',
        startsAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // En 7 d√≠as
        endsAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000 + 8 * 60 * 60 * 1000), // 8 horas despu√©s
        forceLayer: 'GIFT_PURE',
        participantsCount: 8,
      },
    }),
  ]);

  console.log(`‚úì Creados ${bridgeEvents.length} bridge events`);

  // ==========================================
  // GOVERNANCE: DELEGATION (COMMENTED OUT - Models don't exist)
  // ==========================================
  // console.log('üó≥Ô∏è Creando Delegations...');
  //
  // const delegates = await Promise.all([
  //   prisma.delegate.create({
  //     data: {
  //       userId: users[0].id,
  //       userName: users[0].name,
  //       avatar: users[0].avatar,
  //       reputation: users[0].peopleHelped!,
  //       expertise: ['sostenibilidad', 'eventos', 'jardiner√≠a'],
  //       activeDelegations: 3,
  //       successRate: 92.5,
  //       bio: users[0].bio!,
  //     },
  //   }),
  //   prisma.delegate.create({
  //     data: {
  //       userId: users[1].id,
  //       userName: users[1].name,
  //       avatar: users[1].avatar,
  //       reputation: users[1].peopleHelped!,
  //       expertise: ['reparaci√≥n', 'carpinter√≠a', 'bricolaje'],
  //       activeDelegations: 2,
  //       successRate: 88.0,
  //       bio: users[1].bio!,
  //     },
  //   }),
  // ]);
  //
  // console.log(`‚úì Creados ${delegates.length} delegates`);
  //
  // // Delegaciones
  // await Promise.all([
  //   prisma.delegation.create({
  //     data: {
  //       delegateId: delegates[0].id,
  //       userId: users[2].id,
  //       category: 'sostenibilidad',
  //       votingPower: 10,
  //       active: true,
  //       expiresAt: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 90 d√≠as
  //     },
  //   }),
  //   prisma.delegation.create({
  //     data: {
  //       delegateId: delegates[1].id,
  //       userId: users[2].id,
  //       category: 'reparaci√≥n',
  //       votingPower: 5,
  //       active: true,
  //     },
  //   }),
  // ]);
  //
  // console.log('‚úì Creadas delegaciones');

  // ==========================================
  // GAMIFICACI√ìN: STREAKS (COMMENTED OUT - Model doesn't exist)
  // ==========================================
  // console.log('üî• Creando Streaks...');
  //
  // await Promise.all([
  //   prisma.userStreak.create({
  //     data: {
  //       userId: users[0].id,
  //       currentStreak: 15,
  //       longestStreak: 30,
  //       lastActivityAt: new Date(),
  //       multiplier: 1.5,
  //     },
  //   }),
  //   prisma.userStreak.create({
  //     data: {
  //       userId: users[1].id,
  //       currentStreak: 7,
  //       longestStreak: 12,
  //       lastActivityAt: new Date(),
  //       multiplier: 1.2,
  //     },
  //   }),
  // ]);
  //
  // console.log('‚úì Creados streaks');

  // ==========================================
  // GAMIFICACI√ìN: HAPPY HOUR (COMMENTED OUT - Model doesn't exist)
  // ==========================================
  // console.log('‚è∞ Creando Happy Hour...');
  //
  // await prisma.happyHour.create({
  //   data: {
  //     active: true,
  //     multiplier: 2.0,
  //     startsAt: new Date(Date.now() - 30 * 60 * 1000), // Hace 30 min
  //     endsAt: new Date(Date.now() + 90 * 60 * 1000), // En 90 min
  //     message: '¬°Happy Hour activo! Gana el doble de cr√©ditos en todas las acciones',
  //   },
  // });
  //
  // console.log('‚úì Creado happy hour');

  // ==========================================
  // COMUNIDADES
  // ==========================================
  console.log('üèòÔ∏è  Creando comunidades...');

  const communities = await Promise.all([
    // Comunidad 1: Barrio de Gracia (Barcelona) - OPEN
    prisma.community.create({
      data: {
        slug: 'gracia-barcelona',
        name: 'Barrio de Gracia',
        description: 'Comunidad colaborativa de econom√≠a local en el coraz√≥n de Barcelona. Unidos para compartir recursos, conocimientos y crear una econom√≠a m√°s humana.',
        location: 'Barcelona, Espa√±a',
        lat: 41.4036,
        lng: 2.1589,
        radiusKm: 2.5,
        type: 'NEIGHBORHOOD',
        visibility: 'OPEN',
        requiresApproval: false,
        allowExternalOffers: true,
        primaryColor: '#4CAF50',
        language: 'es',
        currency: 'EUR',
        logo: 'https://images.unsplash.com/photo-1583422409516-2895a77efded?w=200&h=200&fit=crop',
        bannerImage: 'https://images.unsplash.com/photo-1583422409516-2895a77efded?w=1200&h=400&fit=crop',
      },
    }),

    // Comunidad 2: Bermeo (Bizkaia) - OPEN
    prisma.community.create({
      data: {
        slug: 'bermeo',
        name: 'Bermeo',
        description: 'Herri honen bizilagun guztiak elkarlanean. Gure ekonomia lokala indartzeko eta harreman sozialak sendotzeko.',
        location: 'Bermeo, Bizkaia',
        lat: 43.4203,
        lng: -2.7262,
        radiusKm: 5,
        type: 'VILLAGE',
        visibility: 'OPEN',
        requiresApproval: false,
        allowExternalOffers: true,
        primaryColor: '#FF5722',
        language: 'eu',
        currency: 'EUR',
        logo: 'https://images.unsplash.com/photo-1559827260-dc66d52bef19?w=200&h=200&fit=crop',
        bannerImage: 'https://images.unsplash.com/photo-1559827260-dc66d52bef19?w=1200&h=400&fit=crop',
      },
    }),

    // Comunidad 3: Cooperativa Sants - PRIVATE
    prisma.community.create({
      data: {
        slug: 'coop-sants',
        name: 'Cooperativa Sants',
        description: 'Cooperativa de vivienda con econom√≠a interna solidaria. Sistema de intercambio de recursos y servicios entre socios.',
        location: 'Sants, Barcelona',
        lat: 41.3750,
        lng: 2.1372,
        radiusKm: 1,
        type: 'CUSTOM',
        visibility: 'PRIVATE',
        requiresApproval: true,
        allowExternalOffers: false,
        primaryColor: '#9C27B0',
        language: 'es',
        currency: 'EUR',
        logo: 'https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=200&h=200&fit=crop',
      },
    }),

    // Comunidad 4: Uribe Kosta - FEDERATED
    prisma.community.create({
      data: {
        slug: 'uribe-kosta',
        name: 'Uribe Kosta',
        description: 'Eskualde osoa lotzen duen ekonomia-sarea. Hainbat herri federatuta ekonomia zirkularrean.',
        location: 'Uribe Kosta, Bizkaia',
        lat: 43.3833,
        lng: -2.9833,
        radiusKm: 15,
        type: 'COUNTY',
        visibility: 'FEDERATED',
        requiresApproval: false,
        allowExternalOffers: true,
        primaryColor: '#00BCD4',
        language: 'eu',
        currency: 'EUR',
        logo: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=200&h=200&fit=crop',
        bannerImage: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=1200&h=400&fit=crop',
      },
    }),

    // Comunidad 5: Madrid Centro - PUBLIC
    prisma.community.create({
      data: {
        slug: 'madrid-centro',
        name: 'Madrid Centro',
        description: 'Red de econom√≠a colaborativa en el centro de Madrid. Conectando vecinos, comercios y organizaciones para un futuro m√°s sostenible.',
        location: 'Centro, Madrid',
        lat: 40.4168,
        lng: -3.7038,
        radiusKm: 3,
        type: 'NEIGHBORHOOD',
        visibility: 'PUBLIC',
        requiresApproval: true,
        allowExternalOffers: true,
        primaryColor: '#FFC107',
        language: 'es',
        currency: 'EUR',
        logo: 'https://images.unsplash.com/photo-1539037116277-4db20889f2d4?w=200&h=200&fit=crop',
        bannerImage: 'https://images.unsplash.com/photo-1539037116277-4db20889f2d4?w=1200&h=400&fit=crop',
      },
    }),

    // Comunidad 6: Mancomunidad de Andia - OPEN
    prisma.community.create({
      data: {
        slug: 'mancomunidad-andia',
        name: 'Mancomunidad de Andia',
        description: 'Herriak elkartuta ekonomia zirkularrean. Andiako mendilerroko herriak, baliabideak eta zerbitzuak partekatzen.',
        location: 'Sierra de And√≠a, Navarra',
        lat: 42.85,
        lng: -2.05,
        radiusKm: 12,
        type: 'COUNTY',
        visibility: 'OPEN',
        requiresApproval: false,
        allowExternalOffers: true,
        primaryColor: '#2E7D32',
        language: 'eu',
        currency: 'EUR',
        logo: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=200&h=200&fit=crop',
        bannerImage: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=1200&h=400&fit=crop',
      },
    }),

    // Comunidad 7: Valdizarbe - FEDERATED
    prisma.community.create({
      data: {
        slug: 'valdizarbe',
        name: 'Valdizarbe',
        description: 'Comarca de Valdizarbe unida en econom√≠a local. Desde Artajona hasta Tafalla, compartiendo recursos y conocimientos.',
        location: 'Valdizarbe, Navarra',
        lat: 42.55,
        lng: -1.75,
        radiusKm: 18,
        type: 'COUNTY',
        visibility: 'FEDERATED',
        requiresApproval: false,
        allowExternalOffers: true,
        primaryColor: '#D32F2F',
        language: 'es',
        currency: 'EUR',
        logo: 'https://images.unsplash.com/photo-1464207687429-7505649dae38?w=200&h=200&fit=crop',
        bannerImage: 'https://images.unsplash.com/photo-1464207687429-7505649dae38?w=1200&h=400&fit=crop',
      },
    }),

    // Comunidad 8: Am√©scoa / Ameskoa - OPEN
    prisma.community.create({
      data: {
        slug: 'ameskoa',
        name: 'Am√©scoa / Ameskoa',
        description: 'Ibar margaria, herri txikiak batera. Ameskoako harana, tokiko ekonomia eta elkartasuna indartuz.',
        location: 'Valle de Am√©scoa, Navarra',
        lat: 42.75,
        lng: -2.25,
        radiusKm: 10,
        type: 'CUSTOM',
        visibility: 'OPEN',
        requiresApproval: false,
        allowExternalOffers: true,
        primaryColor: '#558B2F',
        language: 'eu',
        currency: 'EUR',
        logo: 'https://images.unsplash.com/photo-1470071459604-3b5ec3a7fe05?w=200&h=200&fit=crop',
        bannerImage: 'https://images.unsplash.com/photo-1470071459604-3b5ec3a7fe05?w=1200&h=400&fit=crop',
      },
    }),
  ]);

  console.log(`‚úì Creadas ${communities.length} comunidades`);

  // Asignando usuarios a comunidades
  // Nota: Los usuarios solo pueden estar en una comunidad a la vez (communityId es opcional en User)
  console.log('üë• Asignando usuarios a comunidades...');

  await Promise.all([
    // Mar√≠a en Madrid Centro (fundadora)
    prisma.user.update({
      where: { id: users[0].id },
      data: { communityId: communities[4].id }, // Madrid Centro
    }),

    // Juan en Bermeo (fundador)
    prisma.user.update({
      where: { id: users[1].id },
      data: { communityId: communities[1].id }, // Bermeo
    }),

    // Ana en Madrid Centro (miembro)
    prisma.user.update({
      where: { id: users[2].id },
      data: { communityId: communities[4].id }, // Madrid Centro
    }),

    // Tienda en Gracia (miembro)
    prisma.user.update({
      where: { id: users[3].id },
      data: { communityId: communities[0].id }, // Gracia
    }),

    // Carlos en Coop Sants (fundador)
    prisma.user.update({
      where: { id: users[4].id },
      data: { communityId: communities[2].id }, // Coop Sants
    }),
  ]);

  console.log('‚úì Asignados usuarios a comunidades');

  // ==========================================
  // MUTUAL AID: NECESIDADES Y PROYECTOS
  // ==========================================
  console.log('\nü§ù Creando necesidades y proyectos comunitarios...');

  // Necesidades
  const needs = await Promise.all([
    // Necesidad de conocimientos - clases
    prisma.need.create({
      data: {
        creatorId: users[2].id, // Ana
        scope: 'PERSONAL',
        category: 'CHRONIC',
        type: 'EDUCATION',
        title: 'Necesito clases de espa√±ol para mi hijo',
        description: 'Mi hijo de 8 a√±os necesita apoyo con el espa√±ol. Somos reci√©n llegados y le cuesta en el colegio.',
        location: 'Madrid Centro',
        latitude: 40.4168,
        longitude: -3.7038,
        country: 'Espa√±a',
        resourceTypes: ['SKILLS', 'TIME_HOURS'],
        targetHours: 20.0,
        neededSkills: ['ense√±anza', 'espa√±ol', 'pedagog√≠a'],
        urgencyLevel: 2,
        deadline: new Date('2025-12-31'),
      },
    }),

    // Necesidad de materiales
    prisma.need.create({
      data: {
        creatorId: users[4].id, // Carlos
        communityId: communities[2].id,
        scope: 'COMMUNITY',
        category: 'PROJECT',
        type: 'INFRASTRUCTURE',
        title: 'Materiales para huerto comunitario',
        description: 'Necesitamos tierra, semillas y herramientas para crear un huerto comunitario en el barrio.',
        location: 'Sants, Barcelona',
        latitude: 41.3788,
        longitude: 2.1389,
        country: 'Espa√±a',
        resourceTypes: ['MATERIALS', 'EQUIPMENT', 'CREDITS'],
        targetCredits: 500,
        neededMaterials: {
          tierra: '200kg',
          semillas: 'variadas',
          herramientas: 'palas, rastrillos, regaderas',
        },
        urgencyLevel: 2,
        deadline: new Date('2025-11-30'),
      },
    }),

    // Necesidad de tiempo/voluntarios
    prisma.need.create({
      data: {
        creatorId: users[1].id, // Juan
        communityId: communities[1].id,
        scope: 'COMMUNITY',
        category: 'URGENT',
        type: 'ENVIRONMENT',
        title: 'Voluntarios para limpieza de playa',
        description: 'Organizamos limpieza de playa este s√°bado. Necesitamos voluntarios para recoger pl√°sticos.',
        location: 'Bermeo',
        latitude: 43.4207,
        longitude: -2.7247,
        country: 'Espa√±a',
        resourceTypes: ['TIME_HOURS'],
        targetHours: 30.0,
        urgencyLevel: 3,
        deadline: new Date('2025-11-02'),
      },
    }),

    // Necesidad de habilidades t√©cnicas
    prisma.need.create({
      data: {
        creatorId: users[3].id, // Tienda
        scope: 'PERSONAL',
        category: 'URGENT',
        type: 'TECHNOLOGY',
        title: 'Ayuda para reparar ordenador del negocio',
        description: 'El ordenador de la caja se ha estropeado y no puedo cobrar. Necesito ayuda t√©cnica urgente.',
        location: 'Gracia, Barcelona',
        latitude: 41.4036,
        longitude: 2.1564,
        country: 'Espa√±a',
        resourceTypes: ['SKILLS'],
        neededSkills: ['inform√°tica', 'reparaci√≥n'],
        urgencyLevel: 4,
        deadline: new Date('2025-10-25'),
      },
    }),

    // Necesidad local urgente de alimentos
    prisma.need.create({
      data: {
        creatorId: users[2].id, // Ana
        communityId: communities[4].id, // Madrid Centro
        scope: 'PERSONAL',
        category: 'URGENT',
        type: 'FOOD',
        title: 'Necesito alimentos b√°sicos para familia de 3',
        description: 'He perdido mi trabajo recientemente y necesito ayuda con alimentos b√°sicos. Tengo 2 hijos peque√±os.',
        location: 'Madrid Centro',
        latitude: 40.4168,
        longitude: -3.7038,
        country: 'Espa√±a',
        resourceTypes: ['EUR', 'CREDITS'],
        targetEur: 150.0,
        targetCredits: 300,
        urgencyLevel: 4,
        deadline: new Date('2025-11-15'),
        isVerified: true,
        verifiedBy: users[0].id,
        verifiedAt: new Date(),
      },
    }),

    // Necesidad comunitaria
    prisma.need.create({
      data: {
        communityId: communities[1].id, // Bermeo
        scope: 'COMMUNITY',
        category: 'PROJECT',
        type: 'INFRASTRUCTURE',
        title: 'Reparar front√≥n del pueblo',
        description: 'El front√≥n comunitario necesita reparaciones urgentes para seguir siendo usado por los j√≥venes.',
        location: 'Bermeo, Vizcaya',
        latitude: 43.4207,
        longitude: -2.7247,
        country: 'Espa√±a',
        resourceTypes: ['TIME_HOURS', 'SKILLS', 'MATERIALS'],
        targetHours: 40.0,
        neededSkills: ['alba√±iler√≠a', 'carpinter√≠a'],
        neededMaterials: { cemento: '20 sacos', pintura: '50 litros' },
        urgencyLevel: 3,
        deadline: new Date('2025-12-01'),
      },
    }),

    // Necesidad global
    prisma.need.create({
      data: {
        creatorId: users[0].id, // Mar√≠a
        scope: 'GLOBAL',
        category: 'EMERGENCY',
        type: 'WATER',
        title: 'Purificar fuente de agua contaminada en pueblo rural',
        description: 'La √∫nica fuente de agua del pueblo est√° contaminada. 200 familias sin acceso a agua potable.',
        location: 'Karnataka',
        latitude: 12.9716,
        longitude: 77.5946,
        country: 'India',
        resourceTypes: ['EUR', 'EQUIPMENT'],
        targetEur: 5000.0,
        urgencyLevel: 5,
        deadline: new Date('2025-11-30'),
        isVerified: true,
        verifiedBy: users[0].id,
        verifiedAt: new Date(),
      },
    }),
  ]);

  // Proyectos Comunitarios
  const projects = await Promise.all([
    // Proyecto escuela en Ghana
    prisma.communityProject.create({
      data: {
        creatorId: users[0].id, // Mar√≠a
        communityId: communities[4].id, // Madrid Centro
        type: 'EDUCATION',
        title: 'Construir escuela primaria en Akosombo, Ghana',
        description: 'Proyecto para construir una escuela que beneficiar√° a 200 ni√±os que actualmente no tienen acceso a educaci√≥n.',
        vision: 'Educaci√≥n accesible para todos los ni√±os de la regi√≥n. En 5 a√±os queremos ver 100% de alfabetizaci√≥n.',
        location: 'Akosombo',
        latitude: 6.2667,
        longitude: 0.0500,
        country: 'Ghana',
        region: 'Eastern Region',
        beneficiaries: 200,
        impactGoals: [
          '200 ni√±os con acceso a educaci√≥n primaria',
          '3 profesores locales empleados',
          'Alfabetizaci√≥n 100% en 5 a√±os',
        ],
        targetEur: 50000,
        targetCredits: 100000,
        targetHours: 500,
        targetSkills: ['construcci√≥n', 'carpinter√≠a', 'electricidad'],
        materialNeeds: {
          cemento: '50 sacos',
          madera: '200m',
          tejas: '500 unidades',
          pupitres: '50 unidades',
        },
        participatingCommunities: [communities[4].id],
        volunteersNeeded: 20,
        startDate: new Date('2026-01-01'),
        endDate: new Date('2026-12-31'),
        estimatedMonths: 12,
        organizationName: 'ONG Educaci√≥n para Todos',
        contactEmail: 'contacto@educacion.org',
        websiteUrl: 'https://educacion.org',
        tags: ['education', 'ghana', 'school', 'children'],
        sdgGoals: [4, 10], // Educaci√≥n de calidad, Reducci√≥n de desigualdades
        isVerified: true,
        verifiedBy: users[0].id,
        status: 'FUNDING',
      },
    }),

    // Proyecto agua en India
    prisma.communityProject.create({
      data: {
        creatorId: users[1].id, // Juan
        communityId: communities[1].id, // Bermeo
        type: 'WATER_SANITATION',
        title: 'Sistema de purificaci√≥n de agua en 5 pueblos rurales',
        description: 'Instalar sistemas de purificaci√≥n de agua en 5 pueblos que actualmente no tienen acceso a agua potable.',
        vision: 'Agua limpia y segura para 500 familias, reduciendo enfermedades transmitidas por agua.',
        location: 'Karnataka',
        latitude: 12.9716,
        longitude: 77.5946,
        country: 'India',
        region: 'Karnataka',
        beneficiaries: 500,
        impactGoals: [
          '500 familias con acceso a agua potable',
          'Reducci√≥n 80% de enfermedades h√≠dricas',
          '500,000 litros de agua limpia por a√±o',
        ],
        targetEur: 10000,
        targetCredits: 20000,
        targetHours: 200,
        targetSkills: ['plomer√≠a', 'ingenier√≠a'],
        materialNeeds: {
          filtros: '5 unidades industriales',
          tuberias: '1000m',
          tanques: '5 unidades 1000L',
        },
        participatingCommunities: [communities[1].id, communities[4].id],
        volunteersNeeded: 15,
        startDate: new Date('2025-11-01'),
        endDate: new Date('2026-06-30'),
        estimatedMonths: 8,
        organizationName: 'Agua Limpia Internacional',
        contactEmail: 'info@agualimpia.org',
        websiteUrl: 'https://agualimpia.org',
        tags: ['water', 'health', 'sanitation', 'india'],
        sdgGoals: [6, 3], // Agua limpia, Salud y bienestar
        isVerified: true,
        verifiedBy: users[0].id,
        status: 'FUNDING',
      },
    }),

    // Auzolan en Navarra
    prisma.communityProject.create({
      data: {
        creatorId: users[1].id, // Juan
        communityId: communities[1].id, // Bermeo
        type: 'AUZOLAN',
        title: 'Auzolan para reparar front√≥n comunitario',
        description: 'Trabajo comunitario tradicional para reparar el front√≥n del pueblo. Todos los vecinos est√°n invitados a participar.',
        vision: 'Recuperar nuestro espacio de encuentro y deporte, fortaleciendo los lazos comunitarios.',
        location: 'Bermeo, Vizcaya',
        latitude: 43.4207,
        longitude: -2.7247,
        country: 'Espa√±a',
        region: 'Pa√≠s Vasco',
        beneficiaries: 100,
        impactGoals: [
          'Front√≥n reparado y funcional',
          '100 personas del pueblo beneficiadas',
          'Tradici√≥n del auzolan mantenida',
        ],
        targetHours: 40,
        targetSkills: ['alba√±iler√≠a', 'carpinter√≠a', 'pintura'],
        materialNeeds: {
          cemento: '20 sacos',
          pintura: '50 litros',
          madera: '20m',
        },
        participatingCommunities: [communities[1].id],
        volunteersNeeded: 15,
        volunteersEnrolled: 8,
        startDate: new Date('2025-11-05'),
        endDate: new Date('2025-11-05'),
        estimatedMonths: 0,
        tags: ['auzolan', 'navarra', 'tradition', 'community'],
        sdgGoals: [11], // Ciudades y comunidades sostenibles
        status: 'READY',
      },
    }),
  ]);

  // Contribuciones de ejemplo
  const contributions = await Promise.all([
    // Mar√≠a contribuye a necesidad de Ana
    prisma.contribution.create({
      data: {
        userId: users[0].id, // Mar√≠a
        needId: needs[0].id,
        contributionType: 'MONETARY',
        amountCredits: 100,
        message: 'Te ayudo con gusto, vecina. √Ånimo!',
        status: 'COMPLETED',
        validatedAt: new Date(),
        validatedBy: users[2].id,
      },
    }),

    // Juan contribuye al proyecto de Ghana
    prisma.contribution.create({
      data: {
        userId: users[1].id, // Juan
        projectId: projects[0].id,
        contributionType: 'MONETARY',
        amountEur: 100,
        message: 'Desde Bermeo apoyamos la educaci√≥n en Ghana',
        status: 'COMPLETED',
        validatedAt: new Date(),
        validatedBy: users[0].id,
      },
    }),

    // Carlos ofrece habilidades para el auzolan
    prisma.contribution.create({
      data: {
        userId: users[4].id, // Carlos
        projectId: projects[2].id,
        contributionType: 'SKILLS',
        amountHours: 4,
        skillsOffered: ['carpinter√≠a', 'alba√±iler√≠a'],
        message: 'Cuenten conmigo para el auzolan!',
        status: 'PENDING',
      },
    }),
  ]);

  // Actualizar amounts en necesidades y proyectos
  await Promise.all([
    prisma.need.update({
      where: { id: needs[0].id },
      data: {
        currentCredits: 100,
        contributorsCount: 1,
      },
    }),
    prisma.communityProject.update({
      where: { id: projects[0].id },
      data: {
        currentEur: 100,
        contributorsCount: 1,
      },
    }),
    prisma.communityProject.update({
      where: { id: projects[2].id },
      data: {
        currentHours: 4,
        contributorsCount: 1,
        volunteersEnrolled: 9,
      },
    }),
  ]);

  // Actualizaci√≥n de proyecto
  const projectUpdate = await prisma.projectUpdate.create({
    data: {
      projectId: projects[0].id,
      authorId: users[0].id,
      title: '¬°Hemos alcanzado 100‚Ç¨!',
      content: 'Gracias a Juan de Bermeo por la primera contribuci√≥n. Sigamos as√≠!',
      progressUpdate: 0.002,
      fundsUsed: 0,
      beneficiariesReached: 0,
      milestones: ['Primera contribuci√≥n recibida'],
      nextSteps: 'Continuar difundiendo el proyecto',
    },
  });

  console.log('‚úì Necesidades y proyectos creados');
  console.log(`   ‚Ä¢ ${needs.length} necesidades`);
  console.log(`   ‚Ä¢ ${projects.length} proyectos comunitarios`);
  console.log(`   ‚Ä¢ ${contributions.length} contribuciones`);

  // ==========================================
  // HOUSING: SOLUCIONES DE VIVIENDA
  // ==========================================
  console.log('\nüè† Creando soluciones de vivienda...');

  // 1. SpaceBank - Banco de Espacios
  const spaceBanks = await Promise.all([
    prisma.spaceBank.create({
      data: {
        ownerId: users[4].id, // Carlos
        communityId: communities[0].id, // Gracia
        type: 'ROOM',
        title: 'Habitaci√≥n en piso compartido - Gracia',
        description: 'Habitaci√≥n individual en piso compartido. Ideal para estudiantes o viajeros. Ambiente colaborativo y respetuoso.',
        images: ['https://images.unsplash.com/photo-1522771739844-6a9f6d5f14af?w=800'],
        address: 'Carrer de Verdi, 45, Gracia, Barcelona',
        lat: 41.4036,
        lng: 2.1564,
        capacity: 1,
        squareMeters: 12,
        features: ['Ventana exterior', 'Luz natural', 'Calefacci√≥n'],
        equipment: ['Cama', 'Escritorio', 'Armario', 'Silla'],
        availableDays: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'],
        availableHours: { start: '00:00', end: '23:59' },
        minBookingHours: 168, // 7 d√≠as
        maxBookingHours: 2160, // 90 d√≠as
        exchangeType: 'MIXED',
        pricePerHour: 0.5,
        creditsPerHour: 2,
        hoursPerHour: 1,
        rules: ['No fumar', 'Respetar horarios de descanso', 'Limpiar espacios comunes'],
        status: 'ACTIVE',
      },
    }),

    prisma.spaceBank.create({
      data: {
        ownerId: users[2].id, // Ana
        type: 'ROOM',
        title: 'Habitaci√≥n para estudiantes de intercambio',
        description: 'Habitaci√≥n disponible para estudiantes que vienen a Madrid. Intercambio cultural y apoyo mutuo.',
        images: ['https://images.unsplash.com/photo-1502672260266-1c1ef2d93688?w=800'],
        address: 'Calle Alcal√°, 123, Madrid',
        lat: 40.4168,
        lng: -3.7038,
        capacity: 1,
        squareMeters: 10,
        features: ['WiFi r√°pido', 'Escritorio amplio', 'Luz natural'],
        equipment: ['Cama', 'Escritorio', 'Armario', 'L√°mpara de escritorio'],
        availableDays: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'],
        availableHours: { start: '00:00', end: '23:59' },
        minBookingHours: 336, // 14 d√≠as
        maxBookingHours: 2880, // 120 d√≠as
        exchangeType: 'TIME_HOURS',
        hoursPerHour: 1,
        rules: ['Compartir cenas comunitarias 1 vez/semana', 'No ruido despu√©s de 23h', 'Limpieza semanal'],
        status: 'ACTIVE',
      },
    }),
  ]);

  // 2. TemporaryHousing - Vivienda Temporal
  const temporaryHousings = await Promise.all([
    prisma.temporaryHousing.create({
      data: {
        hostId: users[0].id, // Mar√≠a
        communityId: communities[4].id, // Madrid Centro
        type: 'EMERGENCY',
        title: 'Vivienda de emergencia para familias',
        description: 'Piso disponible para familias en situaci√≥n de vulnerabilidad temporal. Acompa√±amiento social incluido.',
        images: ['https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?w=800'],
        address: 'Calle Gran V√≠a, 55, Madrid Centro',
        lat: 40.4168,
        lng: -3.7038,
        accommodationType: 'ENTIRE_PLACE',
        beds: 3,
        bathrooms: 1,
        squareMeters: 70,
        amenities: ['Totalmente amueblado', 'Calefacci√≥n', 'Electrodom√©sticos', 'Cerca de colegios', 'WiFi', 'Cocina equipada'],
        houseRules: ['Participar en reuniones semanales', 'Colaborar con limpieza', 'Buscar activamente empleo/vivienda'],
        availableFrom: new Date('2025-01-01'),
        availableTo: new Date('2025-12-31'),
        minNights: 30,
        maxNights: 180,
        exchangeType: 'EUR',
        pricePerNight: 5,
        minReputation: 0,
        requiresApproval: true,
        maxGuests: 4,
        status: 'ACTIVE',
      },
    }),
  ]);

  // 3. HousingCoop - Cooperativa de Vivienda
  const housingCoops = await Promise.all([
    prisma.housingCoop.create({
      data: {
        communityId: communities[2].id, // Coop Sants
        name: 'La Borda 2.0',
        description: 'Proyecto de cooperativa de vivienda en cesi√≥n de uso. Propiedad colectiva, gesti√≥n democr√°tica.',
        vision: '40 viviendas en r√©gimen de cesi√≥n de uso, espacios comunes amplios, arquitectura sostenible y comunidad activa',
        images: ['https://images.unsplash.com/photo-1545324418-cc1a3fa10c00?w=800'],
        type: 'COHOUSING',
        address: 'Carrer de la Constituci√≥, 85, Sants, Barcelona',
        lat: 41.3788,
        lng: 2.1389,
        locationConfirmed: true,
        minMembers: 30,
        maxMembers: 40,
        currentMembers: 2,
        totalBudget: 6000000,
        currentFunds: 360000,
        monthlyContribution: 600,
        governance: 'QUADRATIC_VOTING',
        decisionThreshold: 0.66,
        sharedSpaces: ['sala polivalente', 'lavander√≠a comunitaria', 'huerto urbano', 'azotea', 'taller'],
        privateSpaces: ['40 viviendas', 'balcones privados'],
        communityRules: [
          'Participar en asambleas mensuales',
          'Contribuir 3 horas/mes en tareas comunitarias',
          'Respetar decisiones de la asamblea',
          'Mantener espacios comunes',
        ],
        entryCriteria: {
          initialContribution: 15000,
          minimumStay: '5 a√±os',
          activeParticipation: true,
        },
        phase: 'FUNDING',
        targetMoveIn: new Date('2027-01-01'),
        status: 'OPEN',
      },
    }),
  ]);

  // Miembros de cooperativa
  const coopMembers = await Promise.all([
    prisma.housingCoopMember.create({
      data: {
        coopId: housingCoops[0].id,
        userId: users[4].id, // Carlos
        role: 'FOUNDER',
        status: 'ACTIVE',
        monthlyContribution: 600,
        contributionType: 'EUR',
        totalContributed: 18000,
        commitmentLevel: 'full-time',
        skills: ['Arquitectura', 'Gesti√≥n de proyectos', 'Facilitaci√≥n de asambleas'],
        applicationMessage: 'Fundador del proyecto, con experiencia en cooperativas de vivienda',
        joinedAt: new Date('2025-01-15'),
      },
    }),

    prisma.housingCoopMember.create({
      data: {
        coopId: housingCoops[0].id,
        userId: users[0].id, // Mar√≠a
        role: 'MEMBER',
        status: 'ACTIVE',
        monthlyContribution: 600,
        contributionType: 'EUR',
        totalContributed: 15600,
        commitmentLevel: 'full-time',
        skills: ['Contabilidad', 'Comunicaci√≥n', 'Redes sociales'],
        applicationMessage: 'Busco vivir en comunidad con valores de cooperaci√≥n',
        joinedAt: new Date('2025-02-01'),
      },
    }),
  ]);

  // 4. CommunityGuarantee - Aval Comunitario
  const communityGuarantees = await Promise.all([
    prisma.communityGuarantee.create({
      data: {
        userId: users[2].id, // Ana solicita el aval
        communityId: communities[1].id, // Bermeo
        landlordName: 'Propiedades Bermeo S.L.',
        landlordEmail: 'contacto@propiedadesbermeo.com',
        landlordPhone: '+34 944 123 456',
        propertyAddress: 'Calle Euskalherria, 23, Bermeo',
        monthlyRent: 650,
        coverageMonths: 3,
        maxCoverage: 1950,
        reputation: 85,
        status: 'ACTIVE',
        fundAllocated: 1950,
        activatedAt: new Date('2025-09-01'),
        expiresAt: new Date('2026-09-01'),
      },
    }),
  ]);

  // Supporters del aval comunitario
  const guaranteeSupporters = await Promise.all([
    prisma.guaranteeSupporter.create({
      data: {
        guaranteeId: communityGuarantees[0].id,
        supporterId: users[1].id, // Juan
        monthsCommitted: 12,
        amountCommitted: 1000,
        status: 'ACTIVE',
      },
    }),

    prisma.guaranteeSupporter.create({
      data: {
        guaranteeId: communityGuarantees[0].id,
        supporterId: users[4].id, // Carlos
        monthsCommitted: 6,
        amountCommitted: 500,
        status: 'ACTIVE',
      },
    }),

    prisma.guaranteeSupporter.create({
      data: {
        guaranteeId: communityGuarantees[0].id,
        supporterId: users[0].id, // Mar√≠a
        monthsCommitted: 6,
        amountCommitted: 450,
        status: 'ACTIVE',
      },
    }),
  ]);

  console.log('‚úì Soluciones de vivienda creadas');
  console.log(`   ‚Ä¢ ${spaceBanks.length} bancos de espacios`);
  console.log(`   ‚Ä¢ ${temporaryHousings.length} viviendas temporales`);
  console.log(`   ‚Ä¢ ${housingCoops.length} cooperativas de vivienda`);
  console.log(`   ‚Ä¢ ${coopMembers.length} miembros de cooperativa`);
  console.log(`   ‚Ä¢ ${communityGuarantees.length} avales comunitarios`);
  console.log(`   ‚Ä¢ ${guaranteeSupporters.length} supporters de avales`);

  // ==========================================
  // RESUMEN
  // ==========================================
  console.log('\n‚úÖ ¬°Seed completado exitosamente!');
  console.log('\nüìä Resumen de datos creados:');
  console.log(`   ‚Ä¢ ${users.length} usuarios`);
  console.log(`   ‚Ä¢ ${offers.length} ofertas`);
  console.log(`   ‚Ä¢ ${timeBankOffers.length} ofertas de banco de tiempo`);
  console.log(`   ‚Ä¢ ${timeBankTransactions.length} transacciones de banco de tiempo`);
  console.log(`   ‚Ä¢ ${events.length} eventos`);
  console.log(`   ‚Ä¢ ${posts.length} posts`);
  console.log(`   ‚Ä¢ ${blocks.length} trust blocks`);
  console.log(`   ‚Ä¢ ${proposals.length} propuestas de consenso`);
  console.log('\nü¶é Sistema H√≠brido:');
  console.log(`   ‚Ä¢ ${bridgeEvents.length} bridge events programados`);
  console.log('\nüèòÔ∏è  Comunidades:');
  console.log(`   ‚Ä¢ ${communities.length} comunidades creadas`);
  console.log(`   ‚Ä¢ 5 usuarios asignados a comunidades`);
  console.log('\nüë• Usuarios de prueba (todos con contrase√±a: Test1234!):');
  console.log('   ‚Ä¢ maria@comunidad.local     - Validador Experto (120 ayudas) - Madrid Centro');
  console.log('   ‚Ä¢ juan@comunidad.local      - Validador Activo (55 ayudas) - Bermeo');
  console.log('   ‚Ä¢ ana@comunidad.local       - Usuario Nuevo (8 ayudas) - Madrid Centro');
  console.log('   ‚Ä¢ tienda@comunidad.local    - Comercio Local - Gracia');
  console.log('   ‚Ä¢ carlos@comunidad.local    - Organizador de Eventos - Coop Sants');
  console.log('\nüåê Pru√©balo en: http://localhost:3000');
  console.log('üìö API Docs: http://localhost:4000/api/docs');
  console.log('üõ†Ô∏è  Dev Tools: http://localhost:3000/dev\n');
}

main()
  .catch((e) => {
    console.error('‚ùå Error en seed:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
